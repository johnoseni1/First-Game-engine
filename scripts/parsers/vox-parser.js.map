{"version":3,"file":"vox-parser.js","sources":["../../src/core/event-handler.js","../../src/framework/components/component.js","../../src/core/events.js","../../src/math/math.js","../../src/math/color.js","../../src/math/vec2.js","../../src/math/vec3.js","../../src/math/vec4.js","../../src/framework/components/system.js","vox-parser.mjs"],"sourcesContent":["/**\n * @class\n * @name EventHandler\n * @classdesc Abstract base class that implements functionality for event handling.\n * @description Create a new event handler.\n * @example\n * var obj = new EventHandlerSubclass();\n *\n * // subscribe to an event\n * obj.on('hello', function (str) {\n *     console.log('event hello is fired', str);\n * });\n *\n * // fire event\n * obj.fire('hello', 'world');\n */\nclass EventHandler {\n    constructor() {\n        this.initEventHandler();\n    }\n\n    initEventHandler() {\n        this._callbacks = { };\n        this._callbackActive = { };\n    }\n\n    _addCallback(name, callback, scope, once = false) {\n        if (!name || typeof name !== 'string' || !callback)\n            return;\n\n        if (!this._callbacks[name])\n            this._callbacks[name] = [];\n\n        if (this._callbackActive[name] && this._callbackActive[name] === this._callbacks[name])\n            this._callbackActive[name] = this._callbackActive[name].slice();\n\n        this._callbacks[name].push({\n            callback: callback,\n            scope: scope || this,\n            once: once\n        });\n    }\n\n    /**\n     * @function\n     * @name EventHandler#on\n     * @description Attach an event handler to an event.\n     * @param {string} name - Name of the event to bind the callback to.\n     * @param {callbacks.HandleEvent} callback - Function that is called when event is fired. Note the callback is limited to 8 arguments.\n     * @param {object} [scope] - Object to use as 'this' when the event is fired, defaults to current this.\n     * @returns {EventHandler} Self for chaining.\n     * @example\n     * obj.on('test', function (a, b) {\n     *     console.log(a + b);\n     * });\n     * obj.fire('test', 1, 2); // prints 3 to the console\n     */\n    on(name, callback, scope) {\n        this._addCallback(name, callback, scope, false);\n\n        return this;\n    }\n\n    /**\n     * @function\n     * @name EventHandler#off\n     * @description Detach an event handler from an event. If callback is not provided then all callbacks are unbound from the event,\n     * if scope is not provided then all events with the callback will be unbound.\n     * @param {string} [name] - Name of the event to unbind.\n     * @param {callbacks.HandleEvent} [callback] - Function to be unbound.\n     * @param {object} [scope] - Scope that was used as the this when the event is fired.\n     * @returns {EventHandler} Self for chaining.\n     * @example\n     * var handler = function () {\n     * };\n     * obj.on('test', handler);\n     *\n     * obj.off(); // Removes all events\n     * obj.off('test'); // Removes all events called 'test'\n     * obj.off('test', handler); // Removes all handler functions, called 'test'\n     * obj.off('test', handler, this); // Removes all hander functions, called 'test' with scope this\n     */\n    off(name, callback, scope) {\n        if (name) {\n            if (this._callbackActive[name] && this._callbackActive[name] === this._callbacks[name])\n                this._callbackActive[name] = this._callbackActive[name].slice();\n        } else {\n            for (const key in this._callbackActive) {\n                if (!this._callbacks[key])\n                    continue;\n\n                if (this._callbacks[key] !== this._callbackActive[key])\n                    continue;\n\n                this._callbackActive[key] = this._callbackActive[key].slice();\n            }\n        }\n\n        if (!name) {\n            this._callbacks = { };\n        } else if (!callback) {\n            if (this._callbacks[name])\n                this._callbacks[name] = [];\n        } else {\n            const events = this._callbacks[name];\n            if (!events)\n                return this;\n\n            let count = events.length;\n\n            for (let i = 0; i < count; i++) {\n                if (events[i].callback !== callback)\n                    continue;\n\n                if (scope && events[i].scope !== scope)\n                    continue;\n\n                events[i--] = events[--count];\n            }\n            events.length = count;\n        }\n\n        return this;\n    }\n\n    // ESLint rule disabled here as documenting arg1, arg2...argN as [...] rest\n    // arguments is preferable to documenting each one individually.\n    /* eslint-disable valid-jsdoc */\n    /**\n     * @function\n     * @name EventHandler#fire\n     * @description Fire an event, all additional arguments are passed on to the event listener.\n     * @param {object} name - Name of event to fire.\n     * @param {*} [arg1] - First argument that is passed to the event handler.\n     * @param {*} [arg2] - Second argument that is passed to the event handler.\n     * @param {*} [arg3] - Third argument that is passed to the event handler.\n     * @param {*} [arg4] - Fourth argument that is passed to the event handler.\n     * @param {*} [arg5] - Fifth argument that is passed to the event handler.\n     * @param {*} [arg6] - Sixth argument that is passed to the event handler.\n     * @param {*} [arg7] - Seventh argument that is passed to the event handler.\n     * @param {*} [arg8] - Eighth argument that is passed to the event handler.\n     * @returns {EventHandler} Self for chaining.\n     * @example\n     * obj.fire('test', 'This is the message');\n     */\n    /* eslint-enable valid-jsdoc */\n    fire(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {\n        if (!name || !this._callbacks[name])\n            return this;\n\n        let callbacks;\n\n        if (!this._callbackActive[name]) {\n            this._callbackActive[name] = this._callbacks[name];\n        } else {\n            if (this._callbackActive[name] === this._callbacks[name])\n                this._callbackActive[name] = this._callbackActive[name].slice();\n\n            callbacks = this._callbacks[name].slice();\n        }\n\n        // TODO: What does callbacks do here?\n        // In particular this condition check looks wrong: (i < (callbacks || this._callbackActive[name]).length)\n        // Because callbacks is not an integer\n        // eslint-disable-next-line no-unmodified-loop-condition\n        for (let i = 0; (callbacks || this._callbackActive[name]) && (i < (callbacks || this._callbackActive[name]).length); i++) {\n            const evt = (callbacks || this._callbackActive[name])[i];\n            evt.callback.call(evt.scope, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);\n\n            if (evt.once) {\n                // check that callback still exists because user may have unsubscribed\n                // in the event handler\n                const existingCallback = this._callbacks[name];\n                const ind = existingCallback ? existingCallback.indexOf(evt) : -1;\n\n                if (ind !== -1) {\n                    if (this._callbackActive[name] === existingCallback)\n                        this._callbackActive[name] = this._callbackActive[name].slice();\n\n                    this._callbacks[name].splice(ind, 1);\n                }\n            }\n        }\n\n        if (!callbacks)\n            this._callbackActive[name] = null;\n\n        return this;\n    }\n\n    /**\n     * @function\n     * @name EventHandler#once\n     * @description Attach an event handler to an event. This handler will be removed after being fired once.\n     * @param {string} name - Name of the event to bind the callback to.\n     * @param {callbacks.HandleEvent} callback - Function that is called when event is fired. Note the callback is limited to 8 arguments.\n     * @param {object} [scope] - Object to use as 'this' when the event is fired, defaults to current this.\n     * @returns {EventHandler} Self for chaining.\n     * @example\n     * obj.once('test', function (a, b) {\n     *     console.log(a + b);\n     * });\n     * obj.fire('test', 1, 2); // prints 3 to the console\n     * obj.fire('test', 1, 2); // not going to get handled\n     */\n    once(name, callback, scope) {\n        this._addCallback(name, callback, scope, true);\n        return this;\n    }\n\n    /**\n     * @function\n     * @name EventHandler#hasEvent\n     * @description Test if there are any handlers bound to an event name.\n     * @param {string} name - The name of the event to test.\n     * @returns {boolean} True if the object has handlers bound to the specified event name.\n     * @example\n     * obj.on('test', function () { }); // bind an event to 'test'\n     * obj.hasEvent('test'); // returns true\n     * obj.hasEvent('hello'); // returns false\n     */\n    hasEvent(name) {\n        return (this._callbacks[name] && this._callbacks[name].length !== 0) || false;\n    }\n}\n\nexport { EventHandler };\n","import { EventHandler } from '../../core/event-handler.js';\n\n/**\n * @class\n * @name Component\n * @augments EventHandler\n * @classdesc Components are used to attach functionality on a {@link Entity}. Components\n * can receive update events each frame, and expose properties to the PlayCanvas Editor.\n * @description Base constructor for a Component.\n * @param {ComponentSystem} system - The ComponentSystem used to create this Component.\n * @param {Entity} entity - The Entity that this Component is attached to.\n * @property {ComponentSystem} system The ComponentSystem used to create this Component.\n * @property {Entity} entity The Entity that this Component is attached to.\n * @property {boolean} enabled Enables or disables the component.\n */\nclass Component extends EventHandler {\n    constructor(system, entity) {\n        super();\n\n        this.system = system;\n        this.entity = entity;\n\n        if (this.system.schema && !this._accessorsBuilt) {\n            this.buildAccessors(this.system.schema);\n        }\n\n        this.on(\"set\", function (name, oldValue, newValue) {\n            this.fire(\"set_\" + name, name, oldValue, newValue);\n        });\n\n        this.on('set_enabled', this.onSetEnabled, this);\n    }\n\n    static _buildAccessors(obj, schema) {\n        // Create getter/setter pairs for each property defined in the schema\n        schema.forEach(function (descriptor) {\n            // If the property descriptor is an object, it should have a `name`\n            // member. If not, it should just be the plain property name.\n            const name = (typeof descriptor === 'object') ? descriptor.name : descriptor;\n\n            Object.defineProperty(obj, name, {\n                get: function () {\n                    return this.data[name];\n                },\n                set: function (value) {\n                    const data = this.data;\n                    const oldValue = data[name];\n                    data[name] = value;\n                    this.fire('set', name, oldValue, value);\n                },\n                configurable: true\n            });\n        });\n\n        obj._accessorsBuilt = true;\n    }\n\n    buildAccessors(schema) {\n        Component._buildAccessors(this, schema);\n    }\n\n    onSetEnabled(name, oldValue, newValue) {\n        if (oldValue !== newValue) {\n            if (this.entity.enabled) {\n                if (newValue) {\n                    this.onEnable();\n                } else {\n                    this.onDisable();\n                }\n            }\n        }\n    }\n\n    onEnable() {\n    }\n\n    onDisable() {\n    }\n\n    onPostStateChange() {\n    }\n\n    /**\n     * @private\n     * @name Component#data\n     * @type {ComponentData}\n     * @description Access the component data directly.\n     * Usually you should access the data properties via the individual properties as\n     * modifying this data directly will not fire 'set' events.\n     */\n    get data() {\n        const record = this.system.store[this.entity.getGuid()];\n        return record ? record.data : null;\n    }\n}\n\nexport { Component };\n","import { EventHandler } from './event-handler.js';\n\nconst events = {\n    /**\n     * @private\n     * @function\n     * @name events.attach\n     * @description Attach event methods 'on', 'off', 'fire', 'once' and 'hasEvent' to the\n     * target object.\n     * @param {object} target - The object to add events to.\n     * @returns {object} The target object.\n     * @example\n     * var obj = { };\n     * pc.events.attach(obj);\n     */\n    attach: function (target) {\n        const ev = events;\n        target._addCallback = ev._addCallback;\n        target.on = ev.on;\n        target.off = ev.off;\n        target.fire = ev.fire;\n        target.once = ev.once;\n        target.hasEvent = ev.hasEvent;\n        target._callbacks = { };\n        target._callbackActive = { };\n        return target;\n    },\n\n    _addCallback: EventHandler.prototype._addCallback,\n    on: EventHandler.prototype.on,\n    off: EventHandler.prototype.off,\n    fire: EventHandler.prototype.fire,\n    once: EventHandler.prototype.once,\n    hasEvent: EventHandler.prototype.hasEvent\n};\n\nexport { events };\n","/**\n * @name math\n * @namespace\n * @description Math API.\n */\nconst math = {\n    /**\n     * @constant\n     * @type {number}\n     * @name math.DEG_TO_RAD\n     * @description Conversion factor between degrees and radians.\n     * @example\n     * // Convert 180 degrees to pi radians\n     * var rad = 180 * pc.math.DEG_TO_RAD;\n     */\n    DEG_TO_RAD: Math.PI / 180,\n\n    /**\n     * @constant\n     * @type {number}\n     * @name math.RAD_TO_DEG\n     * @description Conversion factor between degrees and radians.\n     * @example\n     * // Convert pi radians to 180 degrees\n     * var deg = Math.PI * pc.math.RAD_TO_DEG;\n     */\n    RAD_TO_DEG: 180 / Math.PI,\n\n    /**\n     * @function\n     * @name math.clamp\n     * @description Clamp a number between min and max inclusive.\n     * @param {number} value - Number to clamp.\n     * @param {number} min - Min value.\n     * @param {number} max - Max value.\n     * @returns {number} The clamped value.\n     */\n    clamp: function (value, min, max) {\n        if (value >= max) return max;\n        if (value <= min) return min;\n        return value;\n    },\n\n    /**\n     * @function\n     * @name math.intToBytes24\n     * @description Convert an 24 bit integer into an array of 3 bytes.\n     * @param {number} i - Number holding an integer value.\n     * @returns {number[]} An array of 3 bytes.\n     * @example\n     * // Set bytes to [0x11, 0x22, 0x33]\n     * var bytes = pc.math.intToBytes24(0x112233);\n     */\n    intToBytes24: function (i) {\n        const r = (i >> 16) & 0xff;\n        const g = (i >> 8) & 0xff;\n        const b = (i) & 0xff;\n\n        return [r, g, b];\n    },\n\n    /**\n     * @function\n     * @name math.intToBytes32\n     * @description Convert an 32 bit integer into an array of 4 bytes.\n     * @returns {number[]} An array of 4 bytes.\n     * @param {number} i - Number holding an integer value.\n     * @example\n     * // Set bytes to [0x11, 0x22, 0x33, 0x44]\n     * var bytes = pc.math.intToBytes32(0x11223344);\n     */\n    intToBytes32: function (i) {\n        const r = (i >> 24) & 0xff;\n        const g = (i >> 16) & 0xff;\n        const b = (i >> 8) & 0xff;\n        const a = (i) & 0xff;\n\n        return [r, g, b, a];\n    },\n\n    /**\n     * @function\n     * @name math.bytesToInt24\n     * @description Convert 3 8 bit Numbers into a single unsigned 24 bit Number.\n     * @example\n     * // Set result1 to 0x112233 from an array of 3 values\n     * var result1 = pc.math.bytesToInt24([0x11, 0x22, 0x33]);\n     *\n     * // Set result2 to 0x112233 from 3 discrete values\n     * var result2 = pc.math.bytesToInt24(0x11, 0x22, 0x33);\n     * @param {number} r - A single byte (0-255).\n     * @param {number} g - A single byte (0-255).\n     * @param {number} b - A single byte (0-255).\n     * @returns {number} A single unsigned 24 bit Number.\n     */\n    bytesToInt24: function (r, g, b) {\n        if (r.length) {\n            b = r[2];\n            g = r[1];\n            r = r[0];\n        }\n        return ((r << 16) | (g << 8) | b);\n    },\n\n    /**\n     * @function\n     * @name math.bytesToInt32\n     * @description Convert 4 1-byte Numbers into a single unsigned 32bit Number.\n     * @returns {number} A single unsigned 32bit Number.\n     * @example\n     * // Set result1 to 0x11223344 from an array of 4 values\n     * var result1 = pc.math.bytesToInt32([0x11, 0x22, 0x33, 0x44]);\n     *\n     * // Set result2 to 0x11223344 from 4 discrete values\n     * var result2 = pc.math.bytesToInt32(0x11, 0x22, 0x33, 0x44);\n     * @param {number} r - A single byte (0-255).\n     * @param {number} g - A single byte (0-255).\n     * @param {number} b - A single byte (0-255).\n     * @param {number} a - A single byte (0-255).\n     */\n    bytesToInt32: function (r, g, b, a) {\n        if (r.length) {\n            a = r[3];\n            b = r[2];\n            g = r[1];\n            r = r[0];\n        }\n        // Why ((r << 24)>>>32)?\n        // << operator uses signed 32 bit numbers, so 128<<24 is negative.\n        // >>> used unsigned so >>>32 converts back to an unsigned.\n        // See http://stackoverflow.com/questions/1908492/unsigned-integer-in-javascript\n        return ((r << 24) | (g << 16) | (b << 8) | a) >>> 32;\n    },\n\n    /**\n     * @function\n     * @name math.lerp\n     * @returns {number} The linear interpolation of two numbers.\n     * @description Calculates the linear interpolation of two numbers.\n     * @param {number} a - Number to linearly interpolate from.\n     * @param {number} b - Number to linearly interpolate to.\n     * @param {number} alpha - The value controlling the result of interpolation. When alpha is 0,\n     * a is returned. When alpha is 1, b is returned. Between 0 and 1, a linear interpolation between\n     * a and b is returned. alpha is clamped between 0 and 1.\n     */\n    lerp: function (a, b, alpha) {\n        return a + (b - a) * math.clamp(alpha, 0, 1);\n    },\n\n    /**\n     * @function\n     * @name math.lerpAngle\n     * @description Calculates the linear interpolation of two angles ensuring that interpolation\n     * is correctly performed across the 360 to 0 degree boundary. Angles are supplied in degrees.\n     * @returns {number} The linear interpolation of two angles.\n     * @param {number} a - Angle (in degrees) to linearly interpolate from.\n     * @param {number} b - Angle (in degrees) to linearly interpolate to.\n     * @param {number} alpha - The value controlling the result of interpolation. When alpha is 0,\n     * a is returned. When alpha is 1, b is returned. Between 0 and 1, a linear interpolation between\n     * a and b is returned. alpha is clamped between 0 and 1.\n     */\n    lerpAngle: function (a, b, alpha) {\n        if (b - a > 180) {\n            b -= 360;\n        }\n        if (b - a < -180) {\n            b += 360;\n        }\n        return math.lerp(a, b, math.clamp(alpha, 0, 1));\n    },\n\n    /**\n     * @function\n     * @name math.powerOfTwo\n     * @description Returns true if argument is a power-of-two and false otherwise.\n     * @param {number} x - Number to check for power-of-two property.\n     * @returns {boolean} true if power-of-two and false otherwise.\n     */\n    powerOfTwo: function (x) {\n        return ((x !== 0) && !(x & (x - 1)));\n    },\n\n    /**\n     * @function\n     * @name math.nextPowerOfTwo\n     * @description Returns the next power of 2 for the specified value.\n     * @param {number} val - The value for which to calculate the next power of 2.\n     * @returns {number} The next power of 2.\n     */\n    nextPowerOfTwo: function (val) {\n        val--;\n        val |= (val >> 1);\n        val |= (val >> 2);\n        val |= (val >> 4);\n        val |= (val >> 8);\n        val |= (val >> 16);\n        val++;\n        return val;\n    },\n\n    /**\n     * @function\n     * @name math.random\n     * @description Return a pseudo-random number between min and max.\n     * The number generated is in the range [min, max), that is inclusive of the minimum but exclusive of the maximum.\n     * @param {number} min - Lower bound for range.\n     * @param {number} max - Upper bound for range.\n     * @returns {number} Pseudo-random number between the supplied range.\n     */\n    random: function (min, max) {\n        const diff = max - min;\n        return Math.random() * diff + min;\n    },\n\n    /**\n     * @function\n     * @name math.smoothstep\n     * @description The function interpolates smoothly between two input values based on\n     * a third one that should be between the first two. The returned value is clamped\n     * between 0 and 1.\n     * <br/>The slope (i.e. derivative) of the smoothstep function starts at 0 and ends at 0.\n     * This makes it easy to create a sequence of transitions using smoothstep to interpolate\n     * each segment rather than using a more sophisticated or expensive interpolation technique.\n     * <br/>See http://en.wikipedia.org/wiki/Smoothstep for more details.\n     * @param {number} min - The lower bound of the interpolation range.\n     * @param {number} max - The upper bound of the interpolation range.\n     * @param {number} x - The value to interpolate.\n     * @returns {number} The smoothly interpolated value clamped between zero and one.\n     */\n    smoothstep: function (min, max, x) {\n        if (x <= min) return 0;\n        if (x >= max) return 1;\n\n        x = (x - min) / (max - min);\n\n        return x * x * (3 - 2 * x);\n    },\n\n    /**\n     * @function\n     * @name math.smootherstep\n     * @description An improved version of the {@link math.smoothstep} function which has zero\n     * 1st and 2nd order derivatives at t=0 and t=1.\n     * <br/>See http://en.wikipedia.org/wiki/Smoothstep for more details.\n     * @param {number} min - The lower bound of the interpolation range.\n     * @param {number} max - The upper bound of the interpolation range.\n     * @param {number} x - The value to interpolate.\n     * @returns {number} The smoothly interpolated value clamped between zero and one.\n     */\n    smootherstep: function (min, max, x) {\n        if (x <= min) return 0;\n        if (x >= max) return 1;\n\n        x = (x - min) / (max - min);\n\n        return x * x * x * (x * (x * 6 - 15) + 10);\n    },\n\n    /**\n     * @function\n     * @name math.roundUp\n     * @description Rounds a number up to nearest multiple.\n     * @param {number} numToRound - The number to round up.\n     * @param {number} multiple - The multiple to round up to.\n     * @returns {number} A number rounded up to nearest multiple.\n     */\n    roundUp: function (numToRound, multiple) {\n        if (multiple === 0)\n            return numToRound;\n        return Math.ceil(numToRound / multiple) * multiple;\n    },\n\n    /**\n     * @function\n     * @private\n     * @name math.between\n     * @description Checks whether a given number resides between two other given numbers.\n     * @param {number} num - The number to check the position of.\n     * @param {number} a - The first upper or lower threshold to check between.\n     * @param {number} b - The second upper or lower threshold to check between.\n     * @param {boolean} inclusive - If true, a num param which is equal to a or b will return true.\n     * @returns {boolean} true if between or false otherwise.\n     */\n    between: function (num, a, b, inclusive) {\n        const min = Math.min(a, b);\n        const max = Math.max(a, b);\n        return inclusive ? num >= min && num <= max : num > min && num < max;\n    }\n};\n\nexport { math };\n","import { math } from '../math/math.js';\n\n/**\n * @class\n * @name Color\n * @classdesc Representation of an RGBA color.\n * @description Create a new Color object.\n * @param {number|number[]} [r] - The value of the red component (0-1). If r is an array of length 3 or 4, the array will be used to populate all components.\n * @param {number} [g] - The value of the green component (0-1).\n * @param {number} [b] - The value of the blue component (0-1).\n * @param {number} [a] - The value of the alpha component (0-1).\n * @property {number} r The red component of the color.\n * @property {number} g The green component of the color.\n * @property {number} b The blue component of the color.\n * @property {number} a The alpha component of the color.\n */\nclass Color {\n    constructor(r = 0, g = 0, b = 0, a = 1) {\n        const length = r.length;\n        if (length === 3 || length === 4) {\n            this.r = r[0];\n            this.g = r[1];\n            this.b = r[2];\n            this.a = r[3] !== undefined ? r[3] : 1;\n        } else {\n            this.r = r;\n            this.g = g;\n            this.b = b;\n            this.a = a;\n        }\n    }\n\n    /**\n     * @function\n     * @name Color#clone\n     * @description Returns a clone of the specified color.\n     * @returns {Color} A duplicate color object.\n     */\n    clone() {\n        return new Color(this.r, this.g, this.b, this.a);\n    }\n\n    /**\n     * @function\n     * @name Color#copy\n     * @description Copies the contents of a source color to a destination color.\n     * @param {Color} rhs - A color to copy to the specified color.\n     * @returns {Color} Self for chaining.\n     * @example\n     * var src = new pc.Color(1, 0, 0, 1);\n     * var dst = new pc.Color();\n     *\n     * dst.copy(src);\n     *\n     * console.log(\"The two colors are \" + (dst.equals(src) ? \"equal\" : \"different\"));\n     */\n    copy(rhs) {\n        this.r = rhs.r;\n        this.g = rhs.g;\n        this.b = rhs.b;\n        this.a = rhs.a;\n\n        return this;\n    }\n\n    /**\n     * @function\n     * @name Color#equals\n     * @description Reports whether two colors are equal.\n     * @param {Color} rhs - The color to compare to the specified color.\n     * @returns {boolean} True if the colors are equal and false otherwise.\n     * @example\n     * var a = new pc.Color(1, 0, 0, 1);\n     * var b = new pc.Color(1, 1, 0, 1);\n     * console.log(\"The two colors are \" + (a.equals(b) ? \"equal\" : \"different\"));\n     */\n    equals(rhs) {\n        return this.r === rhs.r && this.g === rhs.g && this.b === rhs.b && this.a === rhs.a;\n    }\n\n    /**\n     * @function\n     * @name Color#set\n     * @description Assign values to the color components, including alpha.\n     * @param {number} r - The value for red (0-1).\n     * @param {number} g - The value for blue (0-1).\n     * @param {number} b - The value for green (0-1).\n     * @param {number} [a] - The value for the alpha (0-1), defaults to 1.\n     * @returns {Color} Self for chaining.\n     */\n    set(r, g, b, a = 1) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n\n        return this;\n    }\n\n    /**\n     * @function\n     * @name Color#lerp\n     * @description Returns the result of a linear interpolation between two specified colors.\n     * @param {Color} lhs - The color to interpolate from.\n     * @param {Color} rhs - The color to interpolate to.\n     * @param {number} alpha - The value controlling the point of interpolation. Between 0 and 1, the linear interpolant\n     * will occur on a straight line between lhs and rhs. Outside of this range, the linear interpolant will occur on\n     * a ray extrapolated from this line.\n     * @returns {Color} Self for chaining.\n     * @example\n     * var a = new pc.Color(0, 0, 0);\n     * var b = new pc.Color(1, 1, 0.5);\n     * var r = new pc.Color();\n     *\n     * r.lerp(a, b, 0);   // r is equal to a\n     * r.lerp(a, b, 0.5); // r is 0.5, 0.5, 0.25\n     * r.lerp(a, b, 1);   // r is equal to b\n     */\n    lerp(lhs, rhs, alpha) {\n        this.r = lhs.r + alpha * (rhs.r - lhs.r);\n        this.g = lhs.g + alpha * (rhs.g - lhs.g);\n        this.b = lhs.b + alpha * (rhs.b - lhs.b);\n        this.a = lhs.a + alpha * (rhs.a - lhs.a);\n\n        return this;\n    }\n\n    /**\n     * @function\n     * @name Color#fromString\n     * @description Set the values of the color from a string representation '#11223344' or '#112233'.\n     * @param {string} hex - A string representation in the format '#RRGGBBAA' or '#RRGGBB'. Where RR, GG, BB, AA are red, green, blue and alpha values.\n     * This is the same format used in HTML/CSS.\n     * @returns {Color} Self for chaining.\n     */\n    fromString(hex) {\n        const i = parseInt(hex.replace('#', '0x'), 16);\n        let bytes;\n        if (hex.length > 7) {\n            bytes = math.intToBytes32(i);\n        } else {\n            bytes = math.intToBytes24(i);\n            bytes[3] = 255;\n        }\n\n        this.set(bytes[0] / 255, bytes[1] / 255, bytes[2] / 255, bytes[3] / 255);\n\n        return this;\n    }\n\n    /**\n     * @function\n     * @name Color#toString\n     * @description Converts the color to string form. The format is '#RRGGBBAA', where\n     * RR, GG, BB, AA are the red, green, blue and alpha values. When the alpha value is not\n     * included (the default), this is the same format as used in HTML/CSS.\n     * @param {boolean} alpha - If true, the output string will include the alpha value.\n     * @returns {string} The color in string form.\n     * @example\n     * var c = new pc.Color(1, 1, 1);\n     * // Outputs #ffffffff\n     * console.log(c.toString());\n     */\n    toString(alpha) {\n        let s = \"#\" + ((1 << 24) + (Math.round(this.r * 255) << 16) + (Math.round(this.g * 255) << 8) + Math.round(this.b * 255)).toString(16).slice(1);\n        if (alpha === true) {\n            const a = Math.round(this.a * 255).toString(16);\n            if (this.a < 16 / 255) {\n                s += '0' + a;\n            } else {\n                s += a;\n            }\n\n        }\n\n        return s;\n    }\n\n    /**\n     * @field\n     * @static\n     * @readonly\n     * @name Color.BLACK\n     * @type {Color}\n     * @description A constant color set to black [0, 0, 0, 1].\n     */\n    static BLACK = Object.freeze(new Color(0, 0, 0, 1));\n\n    /**\n     * @field\n     * @static\n     * @readonly\n     * @name Color.BLUE\n     * @type {Color}\n     * @description A constant color set to blue [0, 0, 1, 1].\n     */\n    static BLUE = Object.freeze(new Color(0, 0, 1, 1));\n\n    /**\n     * @field\n     * @static\n     * @readonly\n     * @name Color.CYAN\n     * @type {Color}\n     * @description A constant color set to cyan [0, 1, 1, 1].\n     */\n    static CYAN = Object.freeze(new Color(0, 1, 1, 1));\n\n    /**\n     * @field\n     * @static\n     * @readonly\n     * @name Color.GRAY\n     * @type {Color}\n     * @description A constant color set to gray [0.5, 0.5, 0.5, 1].\n     */\n    static GRAY = Object.freeze(new Color(0.5, 0.5, 0.5, 1));\n\n    /**\n     * @field\n     * @static\n     * @readonly\n     * @name Color.GREEN\n     * @type {Color}\n     * @description A constant color set to green [0, 1, 0, 1].\n     */\n    static GREEN = Object.freeze(new Color(0, 1, 0, 1));\n\n    /**\n     * @field\n     * @static\n     * @readonly\n     * @name Color.MAGENTA\n     * @type {Color}\n     * @description A constant color set to magenta [1, 0, 1, 1].\n     */\n    static MAGENTA = Object.freeze(new Color(1, 0, 1, 1));\n\n    /**\n     * @field\n     * @static\n     * @readonly\n     * @name Color.RED\n     * @type {Color}\n     * @description A constant color set to red [1, 0, 0, 1].\n     */\n    static RED = Object.freeze(new Color(1, 0, 0, 1));\n\n    /**\n     * @field\n     * @static\n     * @readonly\n     * @name Color.WHITE\n     * @type {Color}\n     * @description A constant color set to white [1, 1, 1, 1].\n     */\n    static WHITE = Object.freeze(new Color(1, 1, 1, 1));\n\n    /**\n     * @field\n     * @static\n     * @readonly\n     * @name Color.YELLOW\n     * @type {Color}\n     * @description A constant color set to yellow [1, 1, 0, 1].\n     */\n    static YELLOW = Object.freeze(new Color(1, 1, 0, 1));\n}\n\nexport { Color };\n","/**\r\n * @class\r\n * @name Vec2\r\n * @classdesc A 2-dimensional vector.\r\n * @description Creates a new Vec2 object.\r\n * @param {number|number[]} [x] - The x value. If x is an array of length 2, the array will be used to populate all components.\r\n * @param {number} [y] - The y value.\r\n * @example\r\n * var v = new pc.Vec2(1, 2);\r\n */\r\n/**\r\n * @field\r\n * @name Vec2#x\r\n * @type {number}\r\n * @description The first element of the vector.\r\n * @example\r\n * var vec = new pc.Vec2(10, 20);\r\n *\r\n * // Get x\r\n * var x = vec.x;\r\n *\r\n * // Set x\r\n * vec.x = 0;\r\n */\r\n/**\r\n * @field\r\n * @name Vec2#y\r\n * @type {number}\r\n * @description The second element of the vector.\r\n * @example\r\n * var vec = new pc.Vec2(10, 20);\r\n *\r\n * // Get y\r\n * var y = vec.y;\r\n *\r\n * // Set y\r\n * vec.y = 0;\r\n */\r\nclass Vec2 {\r\n    constructor(x = 0, y = 0) {\r\n        if (x.length === 2) {\r\n            this.x = x[0];\r\n            this.y = x[1];\r\n        } else {\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#add\r\n     * @description Adds a 2-dimensional vector to another in place.\r\n     * @param {Vec2} rhs - The vector to add to the specified vector.\r\n     * @returns {Vec2} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec2(10, 10);\r\n     * var b = new pc.Vec2(20, 20);\r\n     *\r\n     * a.add(b);\r\n     *\r\n     * // Outputs [30, 30]\r\n     * console.log(\"The result of the addition is: \" + a.toString());\r\n     */\r\n    add(rhs) {\r\n        this.x += rhs.x;\r\n        this.y += rhs.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#add2\r\n     * @description Adds two 2-dimensional vectors together and returns the result.\r\n     * @param {Vec2} lhs - The first vector operand for the addition.\r\n     * @param {Vec2} rhs - The second vector operand for the addition.\r\n     * @returns {Vec2} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec2(10, 10);\r\n     * var b = new pc.Vec2(20, 20);\r\n     * var r = new pc.Vec2();\r\n     *\r\n     * r.add2(a, b);\r\n     * // Outputs [30, 30]\r\n     *\r\n     * console.log(\"The result of the addition is: \" + r.toString());\r\n     */\r\n    add2(lhs, rhs) {\r\n        this.x = lhs.x + rhs.x;\r\n        this.y = lhs.y + rhs.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#addScalar\r\n     * @description Adds a number to each element of a vector.\r\n     * @param {number} scalar - The number to add.\r\n     * @returns {Vec2} Self for chaining.\r\n     * @example\r\n     * var vec = new pc.Vec2(3, 4);\r\n     *\r\n     * vec.addScalar(2);\r\n     *\r\n     * // Outputs [5, 6]\r\n     * console.log(\"The result of the addition is: \" + vec.toString());\r\n     */\r\n    addScalar(scalar) {\r\n        this.x += scalar;\r\n        this.y += scalar;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#clone\r\n     * @description Returns an identical copy of the specified 2-dimensional vector.\r\n     * @returns {Vec2} A 2-dimensional vector containing the result of the cloning.\r\n     * @example\r\n     * var v = new pc.Vec2(10, 20);\r\n     * var vclone = v.clone();\r\n     * console.log(\"The result of the cloning is: \" + vclone.toString());\r\n     */\r\n    clone() {\r\n        return new Vec2(this.x, this.y);\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#copy\r\n     * @description Copies the contents of a source 2-dimensional vector to a destination 2-dimensional vector.\r\n     * @param {Vec2} rhs - A vector to copy to the specified vector.\r\n     * @returns {Vec2} Self for chaining.\r\n     * @example\r\n     * var src = new pc.Vec2(10, 20);\r\n     * var dst = new pc.Vec2();\r\n     *\r\n     * dst.copy(src);\r\n     *\r\n     * console.log(\"The two vectors are \" + (dst.equals(src) ? \"equal\" : \"different\"));\r\n     */\r\n    copy(rhs) {\r\n        this.x = rhs.x;\r\n        this.y = rhs.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#cross\r\n     * @description Returns the result of a cross product operation performed on the two specified 2-dimensional vectors.\r\n     * @param {Vec2} rhs - The second 2-dimensional vector operand of the cross product.\r\n     * @returns {number} The cross product of the two vectors.\r\n     * @example\r\n     * var right = new pc.Vec2(1, 0);\r\n     * var up = new pc.Vec2(0, 1);\r\n     * var crossProduct = right.cross(up);\r\n     *\r\n     * // Prints 1\r\n     * console.log(\"The result of the cross product is: \" + crossProduct);\r\n     */\r\n    cross(rhs) {\r\n        return this.x * rhs.y - this.y * rhs.x;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#distance\r\n     * @description Returns the distance between the two specified 2-dimensional vectors.\r\n     * @param {Vec2} rhs - The second 2-dimensional vector to test.\r\n     * @returns {number} The distance between the two vectors.\r\n     * @example\r\n     * var v1 = new pc.Vec2(5, 10);\r\n     * var v2 = new pc.Vec2(10, 20);\r\n     * var d = v1.distance(v2);\r\n     * console.log(\"The between v1 and v2 is: \" + d);\r\n     */\r\n    distance(rhs) {\r\n        const x = this.x - rhs.x;\r\n        const y = this.y - rhs.y;\r\n        return Math.sqrt(x * x + y * y);\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#div\r\n     * @description Divides a 2-dimensional vector by another in place.\r\n     * @param {Vec2} rhs - The vector to divide the specified vector by.\r\n     * @returns {Vec2} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec2(4, 9);\r\n     * var b = new pc.Vec2(2, 3);\r\n     *\r\n     * a.div(b);\r\n     *\r\n     * // Outputs [2, 3]\r\n     * console.log(\"The result of the division is: \" + a.toString());\r\n     */\r\n    div(rhs) {\r\n        this.x /= rhs.x;\r\n        this.y /= rhs.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#div2\r\n     * @description Divides one 2-dimensional vector by another and writes the result to\r\n     * the specified vector.\r\n     * @param {Vec2} lhs - The dividend vector (the vector being divided).\r\n     * @param {Vec2} rhs - The divisor vector (the vector dividing the dividend).\r\n     * @returns {Vec2} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec2(4, 9);\r\n     * var b = new pc.Vec2(2, 3);\r\n     * var r = new pc.Vec2();\r\n     *\r\n     * r.div2(a, b);\r\n     * // Outputs [2, 3]\r\n     *\r\n     * console.log(\"The result of the division is: \" + r.toString());\r\n     */\r\n    div2(lhs, rhs) {\r\n        this.x = lhs.x / rhs.x;\r\n        this.y = lhs.y / rhs.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#divScalar\r\n     * @description Divides each element of a vector by a number.\r\n     * @param {number} scalar - The number to divide by.\r\n     * @returns {Vec2} Self for chaining.\r\n     * @example\r\n     * var vec = new pc.Vec2(3, 6);\r\n     *\r\n     * vec.divScalar(3);\r\n     *\r\n     * // Outputs [1, 2]\r\n     * console.log(\"The result of the division is: \" + vec.toString());\r\n     */\r\n    divScalar(scalar) {\r\n        this.x /= scalar;\r\n        this.y /= scalar;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#dot\r\n     * @description Returns the result of a dot product operation performed on the two specified 2-dimensional vectors.\r\n     * @param {Vec2} rhs - The second 2-dimensional vector operand of the dot product.\r\n     * @returns {number} The result of the dot product operation.\r\n     * @example\r\n     * var v1 = new pc.Vec2(5, 10);\r\n     * var v2 = new pc.Vec2(10, 20);\r\n     * var v1dotv2 = v1.dot(v2);\r\n     * console.log(\"The result of the dot product is: \" + v1dotv2);\r\n     */\r\n    dot(rhs) {\r\n        return this.x * rhs.x + this.y * rhs.y;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#equals\r\n     * @description Reports whether two vectors are equal.\r\n     * @param {Vec2} rhs - The vector to compare to the specified vector.\r\n     * @returns {boolean} True if the vectors are equal and false otherwise.\r\n     * @example\r\n     * var a = new pc.Vec2(1, 2);\r\n     * var b = new pc.Vec2(4, 5);\r\n     * console.log(\"The two vectors are \" + (a.equals(b) ? \"equal\" : \"different\"));\r\n     */\r\n    equals(rhs) {\r\n        return this.x === rhs.x && this.y === rhs.y;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#length\r\n     * @description Returns the magnitude of the specified 2-dimensional vector.\r\n     * @returns {number} The magnitude of the specified 2-dimensional vector.\r\n     * @example\r\n     * var vec = new pc.Vec2(3, 4);\r\n     * var len = vec.length();\r\n     * // Outputs 5\r\n     * console.log(\"The length of the vector is: \" + len);\r\n     */\r\n    length() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#lengthSq\r\n     * @description Returns the magnitude squared of the specified 2-dimensional vector.\r\n     * @returns {number} The magnitude of the specified 2-dimensional vector.\r\n     * @example\r\n     * var vec = new pc.Vec2(3, 4);\r\n     * var len = vec.lengthSq();\r\n     * // Outputs 25\r\n     * console.log(\"The length squared of the vector is: \" + len);\r\n     */\r\n    lengthSq() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#lerp\r\n     * @description Returns the result of a linear interpolation between two specified 2-dimensional vectors.\r\n     * @param {Vec2} lhs - The 2-dimensional to interpolate from.\r\n     * @param {Vec2} rhs - The 2-dimensional to interpolate to.\r\n     * @param {number} alpha - The value controlling the point of interpolation. Between 0 and 1, the linear interpolant\r\n     * will occur on a straight line between lhs and rhs. Outside of this range, the linear interpolant will occur on\r\n     * a ray extrapolated from this line.\r\n     * @returns {Vec2} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec2(0, 0);\r\n     * var b = new pc.Vec2(10, 10);\r\n     * var r = new pc.Vec2();\r\n     *\r\n     * r.lerp(a, b, 0);   // r is equal to a\r\n     * r.lerp(a, b, 0.5); // r is 5, 5\r\n     * r.lerp(a, b, 1);   // r is equal to b\r\n     */\r\n    lerp(lhs, rhs, alpha) {\r\n        this.x = lhs.x + alpha * (rhs.x - lhs.x);\r\n        this.y = lhs.y + alpha * (rhs.y - lhs.y);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#mul\r\n     * @description Multiplies a 2-dimensional vector to another in place.\r\n     * @param {Vec2} rhs - The 2-dimensional vector used as the second multiplicand of the operation.\r\n     * @returns {Vec2} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec2(2, 3);\r\n     * var b = new pc.Vec2(4, 5);\r\n     *\r\n     * a.mul(b);\r\n     *\r\n     * // Outputs 8, 15\r\n     * console.log(\"The result of the multiplication is: \" + a.toString());\r\n     */\r\n    mul(rhs) {\r\n        this.x *= rhs.x;\r\n        this.y *= rhs.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#mul2\r\n     * @description Returns the result of multiplying the specified 2-dimensional vectors together.\r\n     * @param {Vec2} lhs - The 2-dimensional vector used as the first multiplicand of the operation.\r\n     * @param {Vec2} rhs - The 2-dimensional vector used as the second multiplicand of the operation.\r\n     * @returns {Vec2} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec2(2, 3);\r\n     * var b = new pc.Vec2(4, 5);\r\n     * var r = new pc.Vec2();\r\n     *\r\n     * r.mul2(a, b);\r\n     *\r\n     * // Outputs 8, 15\r\n     * console.log(\"The result of the multiplication is: \" + r.toString());\r\n     */\r\n    mul2(lhs, rhs) {\r\n        this.x = lhs.x * rhs.x;\r\n        this.y = lhs.y * rhs.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#mulScalar\r\n     * @description Multiplies each element of a vector by a number.\r\n     * @param {number} scalar - The number to multiply by.\r\n     * @returns {Vec2} Self for chaining.\r\n     * @example\r\n     * var vec = new pc.Vec2(3, 6);\r\n     *\r\n     * vec.mulScalar(3);\r\n     *\r\n     * // Outputs [9, 18]\r\n     * console.log(\"The result of the multiplication is: \" + vec.toString());\r\n     */\r\n    mulScalar(scalar) {\r\n        this.x *= scalar;\r\n        this.y *= scalar;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#normalize\r\n     * @description Returns this 2-dimensional vector converted to a unit vector in place.\r\n     * If the vector has a length of zero, the vector's elements will be set to zero.\r\n     * @returns {Vec2} Self for chaining.\r\n     * @example\r\n     * var v = new pc.Vec2(25, 0);\r\n     *\r\n     * v.normalize();\r\n     *\r\n     * // Outputs 1, 0\r\n     * console.log(\"The result of the vector normalization is: \" + v.toString());\r\n     */\r\n    normalize() {\r\n        const lengthSq = this.x * this.x + this.y * this.y;\r\n        if (lengthSq > 0) {\r\n            const invLength = 1 / Math.sqrt(lengthSq);\r\n            this.x *= invLength;\r\n            this.y *= invLength;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#floor\r\n     * @description Each element is set to the largest integer less than or equal to its value.\r\n     * @returns {Vec2} Self for chaining.\r\n     */\r\n    floor() {\r\n        this.x = Math.floor(this.x);\r\n        this.y = Math.floor(this.y);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#ceil\r\n     * @description Each element is rounded up to the next largest integer.\r\n     * @returns {Vec2} Self for chaining.\r\n     */\r\n    ceil() {\r\n        this.x = Math.ceil(this.x);\r\n        this.y = Math.ceil(this.y);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#round\r\n     * @description Each element is rounded up or down to the nearest integer.\r\n     * @returns {Vec2} Self for chaining.\r\n     */\r\n    round() {\r\n        this.x = Math.round(this.x);\r\n        this.y = Math.round(this.y);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#min\r\n     * @description Each element is assigned a value from rhs parameter if it is smaller.\r\n     * @param {Vec2} rhs - The 2-dimensional vector used as the source of elements to compare to.\r\n     * @returns {Vec2} Self for chaining.\r\n     */\r\n    min(rhs) {\r\n        if (rhs.x < this.x) this.x = rhs.x;\r\n        if (rhs.y < this.y) this.y = rhs.y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#max\r\n     * @description Each element is assigned a value from rhs parameter if it is larger.\r\n     * @param {Vec2} rhs - The 2-dimensional vector used as the source of elements to compare to.\r\n     * @returns {Vec2} Self for chaining.\r\n     */\r\n    max(rhs) {\r\n        if (rhs.x > this.x) this.x = rhs.x;\r\n        if (rhs.y > this.y) this.y = rhs.y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#set\r\n     * @description Sets the specified 2-dimensional vector to the supplied numerical values.\r\n     * @param {number} x - The value to set on the first component of the vector.\r\n     * @param {number} y - The value to set on the second component of the vector.\r\n     * @returns {Vec2} Self for chaining.\r\n     * @example\r\n     * var v = new pc.Vec2();\r\n     * v.set(5, 10);\r\n     *\r\n     * // Outputs 5, 10\r\n     * console.log(\"The result of the vector set is: \" + v.toString());\r\n     */\r\n    set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#sub\r\n     * @description Subtracts a 2-dimensional vector from another in place.\r\n     * @param {Vec2} rhs - The vector to add to the specified vector.\r\n     * @returns {Vec2} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec2(10, 10);\r\n     * var b = new pc.Vec2(20, 20);\r\n     *\r\n     * a.sub(b);\r\n     *\r\n     * // Outputs [-10, -10]\r\n     * console.log(\"The result of the subtraction is: \" + a.toString());\r\n     */\r\n    sub(rhs) {\r\n        this.x -= rhs.x;\r\n        this.y -= rhs.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#sub2\r\n     * @description Subtracts two 2-dimensional vectors from one another and returns the result.\r\n     * @param {Vec2} lhs - The first vector operand for the addition.\r\n     * @param {Vec2} rhs - The second vector operand for the addition.\r\n     * @returns {Vec2} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec2(10, 10);\r\n     * var b = new pc.Vec2(20, 20);\r\n     * var r = new pc.Vec2();\r\n     *\r\n     * r.sub2(a, b);\r\n     *\r\n     * // Outputs [-10, -10]\r\n     * console.log(\"The result of the subtraction is: \" + r.toString());\r\n     */\r\n    sub2(lhs, rhs) {\r\n        this.x = lhs.x - rhs.x;\r\n        this.y = lhs.y - rhs.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#subScalar\r\n     * @description Subtracts a number from each element of a vector.\r\n     * @param {number} scalar - The number to subtract.\r\n     * @returns {Vec2} Self for chaining.\r\n     * @example\r\n     * var vec = new pc.Vec2(3, 4);\r\n     *\r\n     * vec.subScalar(2);\r\n     *\r\n     * // Outputs [1, 2]\r\n     * console.log(\"The result of the subtraction is: \" + vec.toString());\r\n     */\r\n    subScalar(scalar) {\r\n        this.x -= scalar;\r\n        this.y -= scalar;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec2#toString\r\n     * @description Converts the vector to string form.\r\n     * @returns {string} The vector in string form.\r\n     * @example\r\n     * var v = new pc.Vec2(20, 10);\r\n     * // Outputs [20, 10]\r\n     * console.log(v.toString());\r\n     */\r\n    toString() {\r\n        return `[${this.x}, ${this.y}]`;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @private\r\n     * @name Vec2#angleRad\r\n     * @description Calculates the angle between two Vec2's in radians.\r\n     * @param {Vec2} lhs - The first vector operand for the calculation.\r\n     * @param {Vec2} rhs - The second vector operand for the calculation.\r\n     * @returns {number} The calculated angle in radians.\r\n     */\r\n    static angleRad(lhs, rhs) {\r\n        return Math.atan2(lhs.x * rhs.y - lhs.y * rhs.x, lhs.x * rhs.x + lhs.y * rhs.y);\r\n    }\r\n\r\n    /**\r\n     * @field\r\n     * @static\r\n     * @readonly\r\n     * @name Vec2.ZERO\r\n     * @type {Vec2}\r\n     * @description A constant vector set to [0, 0].\r\n     */\r\n    static ZERO = Object.freeze(new Vec2(0, 0));\r\n\r\n    /**\r\n     * @field\r\n     * @static\r\n     * @readonly\r\n     * @name Vec2.ONE\r\n     * @type {Vec2}\r\n     * @description A constant vector set to [1, 1].\r\n     */\r\n    static ONE = Object.freeze(new Vec2(1, 1));\r\n\r\n    /**\r\n     * @field\r\n     * @static\r\n     * @readonly\r\n     * @name Vec2.UP\r\n     * @type {Vec2}\r\n     * @description A constant vector set to [0, 1].\r\n     */\r\n    static UP = Object.freeze(new Vec2(0, 1));\r\n\r\n    /**\r\n     * @field\r\n     * @static\r\n     * @readonly\r\n     * @name Vec2.DOWN\r\n     * @type {Vec2}\r\n     * @description A constant vector set to [0, -1].\r\n     */\r\n    static DOWN = Object.freeze(new Vec2(0, -1));\r\n\r\n    /**\r\n     * @field\r\n     * @static\r\n     * @readonly\r\n     * @name Vec2.RIGHT\r\n     * @type {Vec2}\r\n     * @description A constant vector set to [1, 0].\r\n     */\r\n    static RIGHT = Object.freeze(new Vec2(1, 0));\r\n\r\n    /**\r\n     * @field\r\n     * @static\r\n     * @readonly\r\n     * @name Vec2.LEFT\r\n     * @type {Vec2}\r\n     * @description A constant vector set to [-1, 0].\r\n     */\r\n    static LEFT = Object.freeze(new Vec2(-1, 0));\r\n}\r\n\r\nexport { Vec2 };\r\n","/**\r\n * @class\r\n * @name Vec3\r\n * @classdesc A 3-dimensional vector.\r\n * @description Creates a new Vec3 object.\r\n * @param {number|number[]} [x] - The x value. If x is an array of length 3, the array will be used to populate all components.\r\n * @param {number} [y] - The y value.\r\n * @param {number} [z] - The z value.\r\n * @example\r\n * var v = new pc.Vec3(1, 2, 3);\r\n */\r\n/**\r\n * @name Vec3#x\r\n * @type {number}\r\n * @description The first component of the vector.\r\n * @example\r\n * var vec = new pc.Vec3(10, 20, 30);\r\n *\r\n * // Get x\r\n * var x = vec.x;\r\n *\r\n * // Set x\r\n * vec.x = 0;\r\n */\r\n/**\r\n * @name Vec3#y\r\n * @type {number}\r\n * @description The second component of the vector.\r\n * @example\r\n * var vec = new pc.Vec3(10, 20, 30);\r\n *\r\n * // Get y\r\n * var y = vec.y;\r\n *\r\n * // Set y\r\n * vec.y = 0;\r\n */\r\n/**\r\n * @name Vec3#z\r\n * @type {number}\r\n * @description The third component of the vector.\r\n * @example\r\n * var vec = new pc.Vec3(10, 20, 30);\r\n *\r\n * // Get z\r\n * var z = vec.z;\r\n *\r\n * // Set z\r\n * vec.z = 0;\r\n */\r\nclass Vec3 {\r\n    constructor(x = 0, y = 0, z = 0) {\r\n        if (x.length === 3) {\r\n            this.x = x[0];\r\n            this.y = x[1];\r\n            this.z = x[2];\r\n        } else {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.z = z;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#add\r\n     * @description Adds a 3-dimensional vector to another in place.\r\n     * @param {Vec3} rhs - The vector to add to the specified vector.\r\n     * @returns {Vec3} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec3(10, 10, 10);\r\n     * var b = new pc.Vec3(20, 20, 20);\r\n     *\r\n     * a.add(b);\r\n     *\r\n     * // Outputs [30, 30, 30]\r\n     * console.log(\"The result of the addition is: \" + a.toString());\r\n     */\r\n    add(rhs) {\r\n        this.x += rhs.x;\r\n        this.y += rhs.y;\r\n        this.z += rhs.z;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#add2\r\n     * @description Adds two 3-dimensional vectors together and returns the result.\r\n     * @param {Vec3} lhs - The first vector operand for the addition.\r\n     * @param {Vec3} rhs - The second vector operand for the addition.\r\n     * @returns {Vec3} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec3(10, 10, 10);\r\n     * var b = new pc.Vec3(20, 20, 20);\r\n     * var r = new pc.Vec3();\r\n     *\r\n     * r.add2(a, b);\r\n     * // Outputs [30, 30, 30]\r\n     *\r\n     * console.log(\"The result of the addition is: \" + r.toString());\r\n     */\r\n    add2(lhs, rhs) {\r\n        this.x = lhs.x + rhs.x;\r\n        this.y = lhs.y + rhs.y;\r\n        this.z = lhs.z + rhs.z;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#addScalar\r\n     * @description Adds a number to each element of a vector.\r\n     * @param {number} scalar - The number to add.\r\n     * @returns {Vec3} Self for chaining.\r\n     * @example\r\n     * var vec = new pc.Vec3(3, 4, 5);\r\n     *\r\n     * vec.addScalar(2);\r\n     *\r\n     * // Outputs [5, 6, 7]\r\n     * console.log(\"The result of the addition is: \" + vec.toString());\r\n     */\r\n    addScalar(scalar) {\r\n        this.x += scalar;\r\n        this.y += scalar;\r\n        this.z += scalar;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#clone\r\n     * @description Returns an identical copy of the specified 3-dimensional vector.\r\n     * @returns {Vec3} A 3-dimensional vector containing the result of the cloning.\r\n     * @example\r\n     * var v = new pc.Vec3(10, 20, 30);\r\n     * var vclone = v.clone();\r\n     * console.log(\"The result of the cloning is: \" + vclone.toString());\r\n     */\r\n    clone() {\r\n        return new Vec3(this.x, this.y, this.z);\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#copy\r\n     * @description Copies the contents of a source 3-dimensional vector to a destination 3-dimensional vector.\r\n     * @param {Vec3} rhs - A vector to copy to the specified vector.\r\n     * @returns {Vec3} Self for chaining.\r\n     * @example\r\n     * var src = new pc.Vec3(10, 20, 30);\r\n     * var dst = new pc.Vec3();\r\n     *\r\n     * dst.copy(src);\r\n     *\r\n     * console.log(\"The two vectors are \" + (dst.equals(src) ? \"equal\" : \"different\"));\r\n     */\r\n    copy(rhs) {\r\n        this.x = rhs.x;\r\n        this.y = rhs.y;\r\n        this.z = rhs.z;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#cross\r\n     * @description Returns the result of a cross product operation performed on the two specified 3-dimensional vectors.\r\n     * @param {Vec3} lhs - The first 3-dimensional vector operand of the cross product.\r\n     * @param {Vec3} rhs - The second 3-dimensional vector operand of the cross product.\r\n     * @returns {Vec3} Self for chaining.\r\n     * @example\r\n     * var back = new pc.Vec3().cross(pc.Vec3.RIGHT, pc.Vec3.UP);\r\n     *\r\n     * // Prints the Z axis (i.e. [0, 0, 1])\r\n     * console.log(\"The result of the cross product is: \" + back.toString());\r\n     */\r\n    cross(lhs, rhs) {\r\n        // Create temporary variables in case lhs or rhs are 'this'\r\n        const lx = lhs.x;\r\n        const ly = lhs.y;\r\n        const lz = lhs.z;\r\n        const rx = rhs.x;\r\n        const ry = rhs.y;\r\n        const rz = rhs.z;\r\n\r\n        this.x = ly * rz - ry * lz;\r\n        this.y = lz * rx - rz * lx;\r\n        this.z = lx * ry - rx * ly;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#distance\r\n     * @description Returns the distance between the two specified 3-dimensional vectors.\r\n     * @param {Vec3} rhs - The second 3-dimensional vector to test.\r\n     * @returns {number} The distance between the two vectors.\r\n     * @example\r\n     * var v1 = new pc.Vec3(5, 10, 20);\r\n     * var v2 = new pc.Vec3(10, 20, 40);\r\n     * var d = v1.distance(v2);\r\n     * console.log(\"The between v1 and v2 is: \" + d);\r\n     */\r\n    distance(rhs) {\r\n        const x = this.x - rhs.x;\r\n        const y = this.y - rhs.y;\r\n        const z = this.z - rhs.z;\r\n        return Math.sqrt(x * x + y * y + z * z);\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#div\r\n     * @description Divides a 3-dimensional vector by another in place.\r\n     * @param {Vec3} rhs - The vector to divide the specified vector by.\r\n     * @returns {Vec3} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec3(4, 9, 16);\r\n     * var b = new pc.Vec3(2, 3, 4);\r\n     *\r\n     * a.div(b);\r\n     *\r\n     * // Outputs [2, 3, 4]\r\n     * console.log(\"The result of the division is: \" + a.toString());\r\n     */\r\n    div(rhs) {\r\n        this.x /= rhs.x;\r\n        this.y /= rhs.y;\r\n        this.z /= rhs.z;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#div2\r\n     * @description Divides one 3-dimensional vector by another and writes the result to\r\n     * the specified vector.\r\n     * @param {Vec3} lhs - The dividend vector (the vector being divided).\r\n     * @param {Vec3} rhs - The divisor vector (the vector dividing the dividend).\r\n     * @returns {Vec3} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec3(4, 9, 16);\r\n     * var b = new pc.Vec3(2, 3, 4);\r\n     * var r = new pc.Vec3();\r\n     *\r\n     * r.div2(a, b);\r\n     * // Outputs [2, 3, 4]\r\n     *\r\n     * console.log(\"The result of the division is: \" + r.toString());\r\n     */\r\n    div2(lhs, rhs) {\r\n        this.x = lhs.x / rhs.x;\r\n        this.y = lhs.y / rhs.y;\r\n        this.z = lhs.z / rhs.z;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#divScalar\r\n     * @description Divides each element of a vector by a number.\r\n     * @param {number} scalar - The number to divide by.\r\n     * @returns {Vec3} Self for chaining.\r\n     * @example\r\n     * var vec = new pc.Vec3(3, 6, 9);\r\n     *\r\n     * vec.divScalar(3);\r\n     *\r\n     * // Outputs [1, 2, 3]\r\n     * console.log(\"The result of the division is: \" + vec.toString());\r\n     */\r\n    divScalar(scalar) {\r\n        this.x /= scalar;\r\n        this.y /= scalar;\r\n        this.z /= scalar;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#dot\r\n     * @description Returns the result of a dot product operation performed on the two specified 3-dimensional vectors.\r\n     * @param {Vec3} rhs - The second 3-dimensional vector operand of the dot product.\r\n     * @returns {number} The result of the dot product operation.\r\n     * @example\r\n     * var v1 = new pc.Vec3(5, 10, 20);\r\n     * var v2 = new pc.Vec3(10, 20, 40);\r\n     * var v1dotv2 = v1.dot(v2);\r\n     * console.log(\"The result of the dot product is: \" + v1dotv2);\r\n     */\r\n    dot(rhs) {\r\n        return this.x * rhs.x + this.y * rhs.y + this.z * rhs.z;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#equals\r\n     * @description Reports whether two vectors are equal.\r\n     * @param {Vec3} rhs - The vector to compare to the specified vector.\r\n     * @returns {boolean} True if the vectors are equal and false otherwise.\r\n     * @example\r\n     * var a = new pc.Vec3(1, 2, 3);\r\n     * var b = new pc.Vec3(4, 5, 6);\r\n     * console.log(\"The two vectors are \" + (a.equals(b) ? \"equal\" : \"different\"));\r\n     */\r\n    equals(rhs) {\r\n        return this.x === rhs.x && this.y === rhs.y && this.z === rhs.z;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#length\r\n     * @description Returns the magnitude of the specified 3-dimensional vector.\r\n     * @returns {number} The magnitude of the specified 3-dimensional vector.\r\n     * @example\r\n     * var vec = new pc.Vec3(3, 4, 0);\r\n     * var len = vec.length();\r\n     * // Outputs 5\r\n     * console.log(\"The length of the vector is: \" + len);\r\n     */\r\n    length() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#lengthSq\r\n     * @description Returns the magnitude squared of the specified 3-dimensional vector.\r\n     * @returns {number} The magnitude of the specified 3-dimensional vector.\r\n     * @example\r\n     * var vec = new pc.Vec3(3, 4, 0);\r\n     * var len = vec.lengthSq();\r\n     * // Outputs 25\r\n     * console.log(\"The length squared of the vector is: \" + len);\r\n     */\r\n    lengthSq() {\r\n        return this.x * this.x + this.y * this.y + this.z * this.z;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#lerp\r\n     * @description Returns the result of a linear interpolation between two specified 3-dimensional vectors.\r\n     * @param {Vec3} lhs - The 3-dimensional to interpolate from.\r\n     * @param {Vec3} rhs - The 3-dimensional to interpolate to.\r\n     * @param {number} alpha - The value controlling the point of interpolation. Between 0 and 1, the linear interpolant\r\n     * will occur on a straight line between lhs and rhs. Outside of this range, the linear interpolant will occur on\r\n     * a ray extrapolated from this line.\r\n     * @returns {Vec3} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec3(0, 0, 0);\r\n     * var b = new pc.Vec3(10, 10, 10);\r\n     * var r = new pc.Vec3();\r\n     *\r\n     * r.lerp(a, b, 0);   // r is equal to a\r\n     * r.lerp(a, b, 0.5); // r is 5, 5, 5\r\n     * r.lerp(a, b, 1);   // r is equal to b\r\n     */\r\n    lerp(lhs, rhs, alpha) {\r\n        this.x = lhs.x + alpha * (rhs.x - lhs.x);\r\n        this.y = lhs.y + alpha * (rhs.y - lhs.y);\r\n        this.z = lhs.z + alpha * (rhs.z - lhs.z);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#mul\r\n     * @description Multiplies a 3-dimensional vector to another in place.\r\n     * @param {Vec3} rhs - The 3-dimensional vector used as the second multiplicand of the operation.\r\n     * @returns {Vec3} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec3(2, 3, 4);\r\n     * var b = new pc.Vec3(4, 5, 6);\r\n     *\r\n     * a.mul(b);\r\n     *\r\n     * // Outputs 8, 15, 24\r\n     * console.log(\"The result of the multiplication is: \" + a.toString());\r\n     */\r\n    mul(rhs) {\r\n        this.x *= rhs.x;\r\n        this.y *= rhs.y;\r\n        this.z *= rhs.z;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#mul2\r\n     * @description Returns the result of multiplying the specified 3-dimensional vectors together.\r\n     * @param {Vec3} lhs - The 3-dimensional vector used as the first multiplicand of the operation.\r\n     * @param {Vec3} rhs - The 3-dimensional vector used as the second multiplicand of the operation.\r\n     * @returns {Vec3} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec3(2, 3, 4);\r\n     * var b = new pc.Vec3(4, 5, 6);\r\n     * var r = new pc.Vec3();\r\n     *\r\n     * r.mul2(a, b);\r\n     *\r\n     * // Outputs 8, 15, 24\r\n     * console.log(\"The result of the multiplication is: \" + r.toString());\r\n     */\r\n    mul2(lhs, rhs) {\r\n        this.x = lhs.x * rhs.x;\r\n        this.y = lhs.y * rhs.y;\r\n        this.z = lhs.z * rhs.z;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#mulScalar\r\n     * @description Multiplies each element of a vector by a number.\r\n     * @param {number} scalar - The number to multiply by.\r\n     * @returns {Vec3} Self for chaining.\r\n     * @example\r\n     * var vec = new pc.Vec3(3, 6, 9);\r\n     *\r\n     * vec.mulScalar(3);\r\n     *\r\n     * // Outputs [9, 18, 27]\r\n     * console.log(\"The result of the multiplication is: \" + vec.toString());\r\n     */\r\n    mulScalar(scalar) {\r\n        this.x *= scalar;\r\n        this.y *= scalar;\r\n        this.z *= scalar;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#normalize\r\n     * @description Returns this 3-dimensional vector converted to a unit vector in place.\r\n     * If the vector has a length of zero, the vector's elements will be set to zero.\r\n     * @returns {Vec3} Self for chaining.\r\n     * @example\r\n     * var v = new pc.Vec3(25, 0, 0);\r\n     *\r\n     * v.normalize();\r\n     *\r\n     * // Outputs 1, 0, 0\r\n     * console.log(\"The result of the vector normalization is: \" + v.toString());\r\n     */\r\n    normalize() {\r\n        const lengthSq = this.x * this.x + this.y * this.y + this.z * this.z;\r\n        if (lengthSq > 0) {\r\n            const invLength = 1 / Math.sqrt(lengthSq);\r\n            this.x *= invLength;\r\n            this.y *= invLength;\r\n            this.z *= invLength;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#floor\r\n     * @description Each element is set to the largest integer less than or equal to its value.\r\n     * @returns {Vec3} Self for chaining.\r\n     */\r\n    floor() {\r\n        this.x = Math.floor(this.x);\r\n        this.y = Math.floor(this.y);\r\n        this.z = Math.floor(this.z);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#ceil\r\n     * @description Each element is rounded up to the next largest integer.\r\n     * @returns {Vec3} Self for chaining.\r\n     */\r\n    ceil() {\r\n        this.x = Math.ceil(this.x);\r\n        this.y = Math.ceil(this.y);\r\n        this.z = Math.ceil(this.z);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#round\r\n     * @description Each element is rounded up or down to the nearest integer.\r\n     * @returns {Vec3} Self for chaining.\r\n     */\r\n    round() {\r\n        this.x = Math.round(this.x);\r\n        this.y = Math.round(this.y);\r\n        this.z = Math.round(this.z);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#min\r\n     * @description Each element is assigned a value from rhs parameter if it is smaller.\r\n     * @param {Vec3} rhs - The 3-dimensional vector used as the source of elements to compare to.\r\n     * @returns {Vec3} Self for chaining.\r\n     */\r\n    min(rhs) {\r\n        if (rhs.x < this.x) this.x = rhs.x;\r\n        if (rhs.y < this.y) this.y = rhs.y;\r\n        if (rhs.z < this.z) this.z = rhs.z;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#max\r\n     * @description Each element is assigned a value from rhs parameter if it is larger.\r\n     * @param {Vec3} rhs - The 3-dimensional vector used as the source of elements to compare to.\r\n     * @returns {Vec3} Self for chaining.\r\n     */\r\n    max(rhs) {\r\n        if (rhs.x > this.x) this.x = rhs.x;\r\n        if (rhs.y > this.y) this.y = rhs.y;\r\n        if (rhs.z > this.z) this.z = rhs.z;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#project\r\n     * @description Projects this 3-dimensional vector onto the specified vector.\r\n     * @param {Vec3} rhs - The vector onto which the original vector will be projected on.\r\n     * @returns {Vec3} Self for chaining.\r\n     * @example\r\n     * var v = new pc.Vec3(5, 5, 5);\r\n     * var normal = new pc.Vec3(1, 0, 0);\r\n     *\r\n     * v.project(normal);\r\n     *\r\n     * // Outputs 5, 0, 0\r\n     * console.log(\"The result of the vector projection is: \" + v.toString());\r\n     */\r\n    project(rhs) {\r\n        const a_dot_b = this.x * rhs.x + this.y * rhs.y + this.z * rhs.z;\r\n        const b_dot_b = rhs.x * rhs.x + rhs.y * rhs.y + rhs.z * rhs.z;\r\n        const s = a_dot_b / b_dot_b;\r\n        this.x = rhs.x * s;\r\n        this.y = rhs.y * s;\r\n        this.z = rhs.z * s;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#set\r\n     * @description Sets the specified 3-dimensional vector to the supplied numerical values.\r\n     * @param {number} x - The value to set on the first component of the vector.\r\n     * @param {number} y - The value to set on the second component of the vector.\r\n     * @param {number} z - The value to set on the third component of the vector.\r\n     * @returns {Vec3} Self for chaining.\r\n     * @example\r\n     * var v = new pc.Vec3();\r\n     * v.set(5, 10, 20);\r\n     *\r\n     * // Outputs 5, 10, 20\r\n     * console.log(\"The result of the vector set is: \" + v.toString());\r\n     */\r\n    set(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#sub\r\n     * @description Subtracts a 3-dimensional vector from another in place.\r\n     * @param {Vec3} rhs - The vector to add to the specified vector.\r\n     * @returns {Vec3} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec3(10, 10, 10);\r\n     * var b = new pc.Vec3(20, 20, 20);\r\n     *\r\n     * a.sub(b);\r\n     *\r\n     * // Outputs [-10, -10, -10]\r\n     * console.log(\"The result of the subtraction is: \" + a.toString());\r\n     */\r\n    sub(rhs) {\r\n        this.x -= rhs.x;\r\n        this.y -= rhs.y;\r\n        this.z -= rhs.z;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#sub2\r\n     * @description Subtracts two 3-dimensional vectors from one another and returns the result.\r\n     * @param {Vec3} lhs - The first vector operand for the addition.\r\n     * @param {Vec3} rhs - The second vector operand for the addition.\r\n     * @returns {Vec3} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec3(10, 10, 10);\r\n     * var b = new pc.Vec3(20, 20, 20);\r\n     * var r = new pc.Vec3();\r\n     *\r\n     * r.sub2(a, b);\r\n     *\r\n     * // Outputs [-10, -10, -10]\r\n     * console.log(\"The result of the subtraction is: \" + r.toString());\r\n     */\r\n    sub2(lhs, rhs) {\r\n        this.x = lhs.x - rhs.x;\r\n        this.y = lhs.y - rhs.y;\r\n        this.z = lhs.z - rhs.z;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#subScalar\r\n     * @description Subtracts a number from each element of a vector.\r\n     * @param {number} scalar - The number to subtract.\r\n     * @returns {Vec3} Self for chaining.\r\n     * @example\r\n     * var vec = new pc.Vec3(3, 4, 5);\r\n     *\r\n     * vec.subScalar(2);\r\n     *\r\n     * // Outputs [1, 2, 3]\r\n     * console.log(\"The result of the subtraction is: \" + vec.toString());\r\n     */\r\n    subScalar(scalar) {\r\n        this.x -= scalar;\r\n        this.y -= scalar;\r\n        this.z -= scalar;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec3#toString\r\n     * @description Converts the vector to string form.\r\n     * @returns {string} The vector in string form.\r\n     * @example\r\n     * var v = new pc.Vec3(20, 10, 5);\r\n     * // Outputs [20, 10, 5]\r\n     * console.log(v.toString());\r\n     */\r\n    toString() {\r\n        return `[${this.x}, ${this.y}, ${this.z}]`;\r\n    }\r\n\r\n    /**\r\n     * @field\r\n     * @static\r\n     * @readonly\r\n     * @name Vec3.ZERO\r\n     * @type {Vec3}\r\n     * @description A constant vector set to [0, 0, 0].\r\n     */\r\n    static ZERO = Object.freeze(new Vec3(0, 0, 0));\r\n\r\n    /**\r\n     * @field\r\n     * @static\r\n     * @readonly\r\n     * @name Vec3.ONE\r\n     * @type {Vec3}\r\n     * @description A constant vector set to [1, 1, 1].\r\n     */\r\n    static ONE = Object.freeze(new Vec3(1, 1, 1));\r\n\r\n    /**\r\n     * @field\r\n     * @static\r\n     * @readonly\r\n     * @name Vec3.UP\r\n     * @type {Vec3}\r\n     * @description A constant vector set to [0, 1, 0].\r\n     */\r\n    static UP = Object.freeze(new Vec3(0, 1, 0));\r\n\r\n    /**\r\n     * @field\r\n     * @static\r\n     * @readonly\r\n     * @name Vec3.DOWN\r\n     * @type {Vec3}\r\n     * @description A constant vector set to [0, -1, 0].\r\n     */\r\n    static DOWN = Object.freeze(new Vec3(0, -1, 0));\r\n\r\n    /**\r\n     * @field\r\n     * @static\r\n     * @readonly\r\n     * @name Vec3.RIGHT\r\n     * @type {Vec3}\r\n     * @description A constant vector set to [1, 0, 0].\r\n     */\r\n    static RIGHT = Object.freeze(new Vec3(1, 0, 0));\r\n\r\n    /**\r\n     * @field\r\n     * @static\r\n     * @readonly\r\n     * @name Vec3.LEFT\r\n     * @type {Vec3}\r\n     * @description A constant vector set to [-1, 0, 0].\r\n     */\r\n    static LEFT = Object.freeze(new Vec3(-1, 0, 0));\r\n\r\n    /**\r\n     * @field\r\n     * @static\r\n     * @readonly\r\n     * @name Vec3.FORWARD\r\n     * @type {Vec3}\r\n     * @description A constant vector set to [0, 0, -1].\r\n     */\r\n    static FORWARD = Object.freeze(new Vec3(0, 0, -1));\r\n\r\n    /**\r\n     * @field\r\n     * @static\r\n     * @readonly\r\n     * @name Vec3.BACK\r\n     * @type {Vec3}\r\n     * @description A constant vector set to [0, 0, 1].\r\n     */\r\n    static BACK = Object.freeze(new Vec3(0, 0, 1));\r\n}\r\n\r\nexport { Vec3 };\r\n","/**\r\n * @class\r\n * @name Vec4\r\n * @classdesc A 4-dimensional vector.\r\n * @description Creates a new Vec4 object.\r\n * @param {number|number[]} [x] - The x value. If x is an array of length 4, the array will be used to populate all components.\r\n * @param {number} [y] - The y value.\r\n * @param {number} [z] - The z value.\r\n * @param {number} [w] - The w value.\r\n * @example\r\n * var v = new pc.Vec4(1, 2, 3, 4);\r\n */\r\n/**\r\n * @field\r\n * @name Vec4#x\r\n * @type {number}\r\n * @description The first component of the vector.\r\n * @example\r\n * var vec = new pc.Vec4(10, 20, 30, 40);\r\n *\r\n * // Get x\r\n * var x = vec.x;\r\n *\r\n * // Set x\r\n * vec.x = 0;\r\n */\r\n/**\r\n * @field\r\n * @name Vec4#y\r\n * @type {number}\r\n * @description The second component of the vector.\r\n * @example\r\n * var vec = new pc.Vec4(10, 20, 30, 40);\r\n *\r\n * // Get y\r\n * var y = vec.y;\r\n *\r\n * // Set y\r\n * vec.y = 0;\r\n */\r\n/**\r\n * @field\r\n * @name Vec4#z\r\n * @type {number}\r\n * @description The third component of the vector.\r\n * @example\r\n * var vec = new pc.Vec4(10, 20, 30, 40);\r\n *\r\n * // Get z\r\n * var z = vec.z;\r\n *\r\n * // Set z\r\n * vec.z = 0;\r\n */\r\n/**\r\n * @field\r\n * @name Vec4#w\r\n * @type {number}\r\n * @description The fourth component of the vector.\r\n * @example\r\n * var vec = new pc.Vec4(10, 20, 30, 40);\r\n *\r\n * // Get w\r\n * var w = vec.w;\r\n *\r\n * // Set w\r\n * vec.w = 0;\r\n */\r\nclass Vec4 {\r\n    constructor(x = 0, y = 0, z = 0, w = 0) {\r\n        if (x.length === 4) {\r\n            this.x = x[0];\r\n            this.y = x[1];\r\n            this.z = x[2];\r\n            this.w = x[3];\r\n        } else {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.z = z;\r\n            this.w = w;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#add\r\n     * @description Adds a 4-dimensional vector to another in place.\r\n     * @param {Vec4} rhs - The vector to add to the specified vector.\r\n     * @returns {Vec4} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec4(10, 10, 10, 10);\r\n     * var b = new pc.Vec4(20, 20, 20, 20);\r\n     *\r\n     * a.add(b);\r\n     *\r\n     * // Outputs [30, 30, 30]\r\n     * console.log(\"The result of the addition is: \" + a.toString());\r\n     */\r\n    add(rhs) {\r\n        this.x += rhs.x;\r\n        this.y += rhs.y;\r\n        this.z += rhs.z;\r\n        this.w += rhs.w;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#add2\r\n     * @description Adds two 4-dimensional vectors together and returns the result.\r\n     * @param {Vec4} lhs - The first vector operand for the addition.\r\n     * @param {Vec4} rhs - The second vector operand for the addition.\r\n     * @returns {Vec4} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec4(10, 10, 10, 10);\r\n     * var b = new pc.Vec4(20, 20, 20, 20);\r\n     * var r = new pc.Vec4();\r\n     *\r\n     * r.add2(a, b);\r\n     * // Outputs [30, 30, 30]\r\n     *\r\n     * console.log(\"The result of the addition is: \" + r.toString());\r\n     */\r\n    add2(lhs, rhs) {\r\n        this.x = lhs.x + rhs.x;\r\n        this.y = lhs.y + rhs.y;\r\n        this.z = lhs.z + rhs.z;\r\n        this.w = lhs.w + rhs.w;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#addScalar\r\n     * @description Adds a number to each element of a vector.\r\n     * @param {number} scalar - The number to add.\r\n     * @returns {Vec4} Self for chaining.\r\n     * @example\r\n     * var vec = new pc.Vec4(3, 4, 5, 6);\r\n     *\r\n     * vec.addScalar(2);\r\n     *\r\n     * // Outputs [5, 6, 7, 8]\r\n     * console.log(\"The result of the addition is: \" + vec.toString());\r\n     */\r\n    addScalar(scalar) {\r\n        this.x += scalar;\r\n        this.y += scalar;\r\n        this.z += scalar;\r\n        this.w += scalar;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#clone\r\n     * @description Returns an identical copy of the specified 4-dimensional vector.\r\n     * @returns {Vec4} A 4-dimensional vector containing the result of the cloning.\r\n     * @example\r\n     * var v = new pc.Vec4(10, 20, 30, 40);\r\n     * var vclone = v.clone();\r\n     * console.log(\"The result of the cloning is: \" + vclone.toString());\r\n     */\r\n    clone() {\r\n        return new Vec4(this.x, this.y, this.z, this.w);\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#copy\r\n     * @description Copies the contents of a source 4-dimensional vector to a destination 4-dimensional vector.\r\n     * @param {Vec4} rhs - A vector to copy to the specified vector.\r\n     * @returns {Vec4} Self for chaining.\r\n     * @example\r\n     * var src = new pc.Vec4(10, 20, 30, 40);\r\n     * var dst = new pc.Vec4();\r\n     *\r\n     * dst.copy(src);\r\n     *\r\n     * console.log(\"The two vectors are \" + (dst.equals(src) ? \"equal\" : \"different\"));\r\n     */\r\n    copy(rhs) {\r\n        this.x = rhs.x;\r\n        this.y = rhs.y;\r\n        this.z = rhs.z;\r\n        this.w = rhs.w;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#div\r\n     * @description Divides a 4-dimensional vector by another in place.\r\n     * @param {Vec4} rhs - The vector to divide the specified vector by.\r\n     * @returns {Vec4} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec4(4, 9, 16, 25);\r\n     * var b = new pc.Vec4(2, 3, 4, 5);\r\n     *\r\n     * a.div(b);\r\n     *\r\n     * // Outputs [2, 3, 4, 5]\r\n     * console.log(\"The result of the division is: \" + a.toString());\r\n     */\r\n    div(rhs) {\r\n        this.x /= rhs.x;\r\n        this.y /= rhs.y;\r\n        this.z /= rhs.z;\r\n        this.w /= rhs.w;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#div2\r\n     * @description Divides one 4-dimensional vector by another and writes the result to\r\n     * the specified vector.\r\n     * @param {Vec4} lhs - The dividend vector (the vector being divided).\r\n     * @param {Vec4} rhs - The divisor vector (the vector dividing the dividend).\r\n     * @returns {Vec4} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec4(4, 9, 16, 25);\r\n     * var b = new pc.Vec4(2, 3, 4, 5);\r\n     * var r = new pc.Vec4();\r\n     *\r\n     * r.div2(a, b);\r\n     * // Outputs [2, 3, 4, 5]\r\n     *\r\n     * console.log(\"The result of the division is: \" + r.toString());\r\n     */\r\n    div2(lhs, rhs) {\r\n        this.x = lhs.x / rhs.x;\r\n        this.y = lhs.y / rhs.y;\r\n        this.z = lhs.z / rhs.z;\r\n        this.w = lhs.w / rhs.w;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#divScalar\r\n     * @description Divides each element of a vector by a number.\r\n     * @param {number} scalar - The number to divide by.\r\n     * @returns {Vec4} Self for chaining.\r\n     * @example\r\n     * var vec = new pc.Vec4(3, 6, 9, 12);\r\n     *\r\n     * vec.divScalar(3);\r\n     *\r\n     * // Outputs [1, 2, 3, 4]\r\n     * console.log(\"The result of the division is: \" + vec.toString());\r\n     */\r\n    divScalar(scalar) {\r\n        this.x /= scalar;\r\n        this.y /= scalar;\r\n        this.z /= scalar;\r\n        this.w /= scalar;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#dot\r\n     * @description Returns the result of a dot product operation performed on the two specified 4-dimensional vectors.\r\n     * @param {Vec4} rhs - The second 4-dimensional vector operand of the dot product.\r\n     * @returns {number} The result of the dot product operation.\r\n     * @example\r\n     * var v1 = new pc.Vec4(5, 10, 20, 40);\r\n     * var v2 = new pc.Vec4(10, 20, 40, 80);\r\n     * var v1dotv2 = v1.dot(v2);\r\n     * console.log(\"The result of the dot product is: \" + v1dotv2);\r\n     */\r\n    dot(rhs) {\r\n        return this.x * rhs.x + this.y * rhs.y + this.z * rhs.z + this.w * rhs.w;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#equals\r\n     * @description Reports whether two vectors are equal.\r\n     * @param {Vec4} rhs - The vector to compare to the specified vector.\r\n     * @returns {boolean} True if the vectors are equal and false otherwise.\r\n     * @example\r\n     * var a = new pc.Vec4(1, 2, 3, 4);\r\n     * var b = new pc.Vec4(5, 6, 7, 8);\r\n     * console.log(\"The two vectors are \" + (a.equals(b) ? \"equal\" : \"different\"));\r\n     */\r\n    equals(rhs) {\r\n        return this.x === rhs.x && this.y === rhs.y && this.z === rhs.z && this.w === rhs.w;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#length\r\n     * @description Returns the magnitude of the specified 4-dimensional vector.\r\n     * @returns {number} The magnitude of the specified 4-dimensional vector.\r\n     * @example\r\n     * var vec = new pc.Vec4(3, 4, 0, 0);\r\n     * var len = vec.length();\r\n     * // Outputs 5\r\n     * console.log(\"The length of the vector is: \" + len);\r\n     */\r\n    length() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#lengthSq\r\n     * @description Returns the magnitude squared of the specified 4-dimensional vector.\r\n     * @returns {number} The magnitude of the specified 4-dimensional vector.\r\n     * @example\r\n     * var vec = new pc.Vec4(3, 4, 0);\r\n     * var len = vec.lengthSq();\r\n     * // Outputs 25\r\n     * console.log(\"The length squared of the vector is: \" + len);\r\n     */\r\n    lengthSq() {\r\n        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#lerp\r\n     * @description Returns the result of a linear interpolation between two specified 4-dimensional vectors.\r\n     * @param {Vec4} lhs - The 4-dimensional to interpolate from.\r\n     * @param {Vec4} rhs - The 4-dimensional to interpolate to.\r\n     * @param {number} alpha - The value controlling the point of interpolation. Between 0 and 1, the linear interpolant\r\n     * will occur on a straight line between lhs and rhs. Outside of this range, the linear interpolant will occur on\r\n     * a ray extrapolated from this line.\r\n     * @returns {Vec4} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec4(0, 0, 0, 0);\r\n     * var b = new pc.Vec4(10, 10, 10, 10);\r\n     * var r = new pc.Vec4();\r\n     *\r\n     * r.lerp(a, b, 0);   // r is equal to a\r\n     * r.lerp(a, b, 0.5); // r is 5, 5, 5, 5\r\n     * r.lerp(a, b, 1);   // r is equal to b\r\n     */\r\n    lerp(lhs, rhs, alpha) {\r\n        this.x = lhs.x + alpha * (rhs.x - lhs.x);\r\n        this.y = lhs.y + alpha * (rhs.y - lhs.y);\r\n        this.z = lhs.z + alpha * (rhs.z - lhs.z);\r\n        this.w = lhs.w + alpha * (rhs.w - lhs.w);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#mul\r\n     * @description Multiplies a 4-dimensional vector to another in place.\r\n     * @param {Vec4} rhs - The 4-dimensional vector used as the second multiplicand of the operation.\r\n     * @returns {Vec4} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec4(2, 3, 4, 5);\r\n     * var b = new pc.Vec4(4, 5, 6, 7);\r\n     *\r\n     * a.mul(b);\r\n     *\r\n     * // Outputs 8, 15, 24, 35\r\n     * console.log(\"The result of the multiplication is: \" + a.toString());\r\n     */\r\n    mul(rhs) {\r\n        this.x *= rhs.x;\r\n        this.y *= rhs.y;\r\n        this.z *= rhs.z;\r\n        this.w *= rhs.w;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#mul2\r\n     * @description Returns the result of multiplying the specified 4-dimensional vectors together.\r\n     * @param {Vec4} lhs - The 4-dimensional vector used as the first multiplicand of the operation.\r\n     * @param {Vec4} rhs - The 4-dimensional vector used as the second multiplicand of the operation.\r\n     * @returns {Vec4} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec4(2, 3, 4, 5);\r\n     * var b = new pc.Vec4(4, 5, 6, 7);\r\n     * var r = new pc.Vec4();\r\n     *\r\n     * r.mul2(a, b);\r\n     *\r\n     * // Outputs 8, 15, 24, 35\r\n     * console.log(\"The result of the multiplication is: \" + r.toString());\r\n     */\r\n    mul2(lhs, rhs) {\r\n        this.x = lhs.x * rhs.x;\r\n        this.y = lhs.y * rhs.y;\r\n        this.z = lhs.z * rhs.z;\r\n        this.w = lhs.w * rhs.w;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#mulScalar\r\n     * @description Multiplies each element of a vector by a number.\r\n     * @param {number} scalar - The number to multiply by.\r\n     * @returns {Vec4} Self for chaining.\r\n     * @example\r\n     * var vec = new pc.Vec4(3, 6, 9, 12);\r\n     *\r\n     * vec.mulScalar(3);\r\n     *\r\n     * // Outputs [9, 18, 27, 36]\r\n     * console.log(\"The result of the multiplication is: \" + vec.toString());\r\n     */\r\n    mulScalar(scalar) {\r\n        this.x *= scalar;\r\n        this.y *= scalar;\r\n        this.z *= scalar;\r\n        this.w *= scalar;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#normalize\r\n     * @description Returns this 4-dimensional vector converted to a unit vector in place.\r\n     * If the vector has a length of zero, the vector's elements will be set to zero.\r\n     * @returns {Vec4} Self for chaining.\r\n     * @example\r\n     * var v = new pc.Vec4(25, 0, 0, 0);\r\n     *\r\n     * v.normalize();\r\n     *\r\n     * // Outputs 1, 0, 0, 0\r\n     * console.log(\"The result of the vector normalization is: \" + v.toString());\r\n     */\r\n    normalize() {\r\n        const lengthSq = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n        if (lengthSq > 0) {\r\n            const invLength = 1 / Math.sqrt(lengthSq);\r\n            this.x *= invLength;\r\n            this.y *= invLength;\r\n            this.z *= invLength;\r\n            this.w *= invLength;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#floor\r\n     * @description Each element is set to the largest integer less than or equal to its value.\r\n     * @returns {Vec4} Self for chaining.\r\n     */\r\n    floor() {\r\n        this.x = Math.floor(this.x);\r\n        this.y = Math.floor(this.y);\r\n        this.z = Math.floor(this.z);\r\n        this.w = Math.floor(this.w);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#ceil\r\n     * @description Each element is rounded up to the next largest integer.\r\n     * @returns {Vec4} Self for chaining.\r\n     */\r\n    ceil() {\r\n        this.x = Math.ceil(this.x);\r\n        this.y = Math.ceil(this.y);\r\n        this.z = Math.ceil(this.z);\r\n        this.w = Math.ceil(this.w);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#round\r\n     * @description Each element is rounded up or down to the nearest integer.\r\n     * @returns {Vec4} Self for chaining.\r\n     */\r\n    round() {\r\n        this.x = Math.round(this.x);\r\n        this.y = Math.round(this.y);\r\n        this.z = Math.round(this.z);\r\n        this.w = Math.round(this.w);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#min\r\n     * @description Each element is assigned a value from rhs parameter if it is smaller.\r\n     * @param {Vec4} rhs - The 4-dimensional vector used as the source of elements to compare to.\r\n     * @returns {Vec4} Self for chaining.\r\n     */\r\n    min(rhs) {\r\n        if (rhs.x < this.x) this.x = rhs.x;\r\n        if (rhs.y < this.y) this.y = rhs.y;\r\n        if (rhs.z < this.z) this.z = rhs.z;\r\n        if (rhs.w < this.w) this.w = rhs.w;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#max\r\n     * @description Each element is assigned a value from rhs parameter if it is larger.\r\n     * @param {Vec4} rhs - The 4-dimensional vector used as the source of elements to compare to.\r\n     * @returns {Vec4} Self for chaining.\r\n     */\r\n    max(rhs) {\r\n        if (rhs.x > this.x) this.x = rhs.x;\r\n        if (rhs.y > this.y) this.y = rhs.y;\r\n        if (rhs.z > this.z) this.z = rhs.z;\r\n        if (rhs.w > this.w) this.w = rhs.w;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#set\r\n     * @description Sets the specified 4-dimensional vector to the supplied numerical values.\r\n     * @param {number} x - The value to set on the first component of the vector.\r\n     * @param {number} y - The value to set on the second component of the vector.\r\n     * @param {number} z - The value to set on the third component of the vector.\r\n     * @param {number} w - The value to set on the fourth component of the vector.\r\n     * @returns {Vec4} Self for chaining.\r\n     * @example\r\n     * var v = new pc.Vec4();\r\n     * v.set(5, 10, 20, 40);\r\n     *\r\n     * // Outputs 5, 10, 20, 40\r\n     * console.log(\"The result of the vector set is: \" + v.toString());\r\n     */\r\n    set(x, y, z, w) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.w = w;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#sub\r\n     * @description Subtracts a 4-dimensional vector from another in place.\r\n     * @param {Vec4} rhs - The vector to add to the specified vector.\r\n     * @returns {Vec4} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec4(10, 10, 10, 10);\r\n     * var b = new pc.Vec4(20, 20, 20, 20);\r\n     *\r\n     * a.sub(b);\r\n     *\r\n     * // Outputs [-10, -10, -10, -10]\r\n     * console.log(\"The result of the subtraction is: \" + a.toString());\r\n     */\r\n    sub(rhs) {\r\n        this.x -= rhs.x;\r\n        this.y -= rhs.y;\r\n        this.z -= rhs.z;\r\n        this.w -= rhs.w;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#sub2\r\n     * @description Subtracts two 4-dimensional vectors from one another and returns the result.\r\n     * @param {Vec4} lhs - The first vector operand for the subtraction.\r\n     * @param {Vec4} rhs - The second vector operand for the subtraction.\r\n     * @returns {Vec4} Self for chaining.\r\n     * @example\r\n     * var a = new pc.Vec4(10, 10, 10, 10);\r\n     * var b = new pc.Vec4(20, 20, 20, 20);\r\n     * var r = new pc.Vec4();\r\n     *\r\n     * r.sub2(a, b);\r\n     *\r\n     * // Outputs [-10, -10, -10, -10]\r\n     * console.log(\"The result of the subtraction is: \" + r.toString());\r\n     */\r\n    sub2(lhs, rhs) {\r\n        this.x = lhs.x - rhs.x;\r\n        this.y = lhs.y - rhs.y;\r\n        this.z = lhs.z - rhs.z;\r\n        this.w = lhs.w - rhs.w;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#subScalar\r\n     * @description Subtracts a number from each element of a vector.\r\n     * @param {number} scalar - The number to subtract.\r\n     * @returns {Vec4} Self for chaining.\r\n     * @example\r\n     * var vec = new pc.Vec4(3, 4, 5, 6);\r\n     *\r\n     * vec.subScalar(2);\r\n     *\r\n     * // Outputs [1, 2, 3, 4]\r\n     * console.log(\"The result of the subtraction is: \" + vec.toString());\r\n     */\r\n    subScalar(scalar) {\r\n        this.x -= scalar;\r\n        this.y -= scalar;\r\n        this.z -= scalar;\r\n        this.w -= scalar;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @name Vec4#toString\r\n     * @description Converts the vector to string form.\r\n     * @returns {string} The vector in string form.\r\n     * @example\r\n     * var v = new pc.Vec4(20, 10, 5, 0);\r\n     * // Outputs [20, 10, 5, 0]\r\n     * console.log(v.toString());\r\n     */\r\n    toString() {\r\n        return `[${this.x}, ${this.y}, ${this.z}, ${this.w}]`;\r\n    }\r\n\r\n    /**\r\n     * @field\r\n     * @static\r\n     * @readonly\r\n     * @name Vec4.ZERO\r\n     * @type {Vec4}\r\n     * @description A constant vector set to [0, 0, 0, 0].\r\n     */\r\n    static ZERO = Object.freeze(new Vec4(0, 0, 0, 0));\r\n\r\n    /**\r\n     * @field\r\n     * @static\r\n     * @readonly\r\n     * @name Vec4.ONE\r\n     * @type {Vec4}\r\n     * @description A constant vector set to [1, 1, 1, 1].\r\n     */\r\n    static ONE = Object.freeze(new Vec4(1, 1, 1, 1));\r\n}\r\n\r\nexport { Vec4 };\r\n","import { events } from '../../core/events.js';\nimport { EventHandler } from '../../core/event-handler.js';\n\nimport { Color } from '../../math/color.js';\nimport { Vec2 } from '../../math/vec2.js';\nimport { Vec3 } from '../../math/vec3.js';\nimport { Vec4 } from '../../math/vec4.js';\n\n/**\n * @class\n * @name ComponentSystem\n * @augments EventHandler\n * @classdesc Component Systems contain the logic and functionality to update all Components of a particular type.\n * @param {Application} app - The application managing this system.\n */\nclass ComponentSystem extends EventHandler {\n    constructor(app) {\n        super();\n\n        this.app = app;\n\n        // The store where all pc.ComponentData objects are kept\n        this.store = {};\n        this.schema = [];\n    }\n\n    // Instance methods\n    /**\n     * @private\n     * @function\n     * @name ComponentSystem#addComponent\n     * @description Create new {@link Component} and component data instances and attach them to the entity.\n     * @param {Entity} entity - The Entity to attach this component to.\n     * @param {object} [data] - The source data with which to create the component.\n     * @returns {Component} Returns a Component of type defined by the component system.\n     * @example\n     * var entity = new pc.Entity(app);\n     * app.systems.model.addComponent(entity, { type: 'box' });\n     * // entity.model is now set to a pc.ModelComponent\n     */\n    addComponent(entity, data = {}) {\n        const component = new this.ComponentType(this, entity);\n        const componentData = new this.DataType();\n\n        this.store[entity.getGuid()] = {\n            entity: entity,\n            data: componentData\n        };\n\n        entity[this.id] = component;\n        entity.c[this.id] = component;\n\n        this.initializeComponentData(component, data, []);\n\n        this.fire('add', entity, component);\n\n        return component;\n    }\n\n    /**\n     * @private\n     * @function\n     * @name ComponentSystem#removeComponent\n     * @description Remove the {@link Component} from the entity and delete the associated component data.\n     * @param {Entity} entity - The entity to remove the component from.\n     * @example\n     * app.systems.model.removeComponent(entity);\n     * // entity.model === undefined\n     */\n    removeComponent(entity) {\n        const record = this.store[entity.getGuid()];\n        const component = entity.c[this.id];\n        this.fire('beforeremove', entity, component);\n        delete this.store[entity.getGuid()];\n        delete entity[this.id];\n        delete entity.c[this.id];\n        this.fire('remove', entity, record.data);\n    }\n\n    /**\n     * @private\n     * @function\n     * @name ComponentSystem#cloneComponent\n     * @description Create a clone of component. This creates a copy of all component data variables.\n     * @param {Entity} entity - The entity to clone the component from.\n     * @param {Entity} clone - The entity to clone the component into.\n     * @returns {Component} The newly cloned component.\n     */\n    cloneComponent(entity, clone) {\n        // default clone is just to add a new component with existing data\n        const src = this.store[entity.getGuid()];\n        return this.addComponent(clone, src.data);\n    }\n\n    /**\n     * @private\n     * @function\n     * @name ComponentSystem#initializeComponentData\n     * @description Called during {@link ComponentSystem#addComponent} to initialize the component data in the store.\n     * This can be overridden by derived Component Systems and either called by the derived System or replaced entirely.\n     * @param {Component} component - The component being initialized.\n     * @param {object} data - The data block used to initialize the component.\n     * @param {string[]|object[]} properties - The array of property descriptors for the component. A descriptor can be either a plain property name, or an object specifying the name and type.\n     */\n    initializeComponentData(component, data = {}, properties) {\n        // initialize\n        for (let i = 0, len = properties.length; i < len; i++) {\n            const descriptor = properties[i];\n            let name, type;\n\n            // If the descriptor is an object, it will have `name` and `type` members\n            if (typeof descriptor === 'object') {\n                name = descriptor.name;\n                type = descriptor.type;\n            } else {\n                // Otherwise, the descriptor is just the property name\n                name = descriptor;\n                type = undefined;\n            }\n\n            let value = data[name];\n\n            if (value !== undefined) {\n                // If we know the intended type of the value, convert the raw data\n                // into an instance of the specified type.\n                if (type !== undefined) {\n                    value = convertValue(value, type);\n                }\n\n                component[name] = value;\n            } else {\n                component[name] = component.data[name];\n            }\n        }\n\n        // after component is initialized call onEnable\n        if (component.enabled && component.entity.enabled) {\n            component.onEnable();\n        }\n    }\n\n    /**\n     * @private\n     * @function\n     * @name ComponentSystem#getPropertiesOfType\n     * @description Searches the component schema for properties that match the specified type.\n     * @param {string} type - The type to search for.\n     * @returns {string[]|object[]} An array of property descriptors matching the specified type.\n     */\n    getPropertiesOfType(type) {\n        const matchingProperties = [];\n        const schema = this.schema || [];\n\n        schema.forEach(function (descriptor) {\n            if (descriptor && typeof descriptor === 'object' && descriptor.type === type) {\n                matchingProperties.push(descriptor);\n            }\n        });\n\n        return matchingProperties;\n    }\n\n    destroy() {\n        this.off();\n    }\n}\n\nfunction convertValue(value, type) {\n    if (!value) {\n        return value;\n    }\n\n    switch (type) {\n        case 'rgb':\n            if (value instanceof Color) {\n                return value.clone();\n            }\n            return new Color(value[0], value[1], value[2]);\n        case 'rgba':\n            if (value instanceof Color) {\n                return value.clone();\n            }\n            return new Color(value[0], value[1], value[2], value[3]);\n        case 'vec2':\n            if (value instanceof Vec2) {\n                return value.clone();\n            }\n            return new Vec2(value[0], value[1]);\n        case 'vec3':\n            if (value instanceof Vec3) {\n                return value.clone();\n            }\n            return new Vec3(value[0], value[1], value[2]);\n        case 'vec4':\n            if (value instanceof Vec4) {\n                return value.clone();\n            }\n            return new Vec4(value[0], value[1], value[2], value[3]);\n        case 'boolean':\n        case 'number':\n        case 'string':\n            return value;\n        case 'entity':\n            return value; // Entity fields should just be a string guid\n        default:\n            throw new Error('Could not convert unhandled type: ' + type);\n    }\n}\n\n// Add event support\nevents.attach(ComponentSystem);\n\nexport { ComponentSystem };\n","// vox loading\n\nimport { Component } from '../../src/framework/components/component.js';\nimport { ComponentSystem } from '../../src/framework/components/system.js';\n\nconst defaultPalette = new Uint8Array(new Uint32Array([\n    0x00000000, 0xffffffff, 0xffccffff, 0xff99ffff, 0xff66ffff, 0xff33ffff, 0xff00ffff, 0xffffccff, 0xffccccff, 0xff99ccff, 0xff66ccff, 0xff33ccff, 0xff00ccff, 0xffff99ff, 0xffcc99ff, 0xff9999ff,\n    0xff6699ff, 0xff3399ff, 0xff0099ff, 0xffff66ff, 0xffcc66ff, 0xff9966ff, 0xff6666ff, 0xff3366ff, 0xff0066ff, 0xffff33ff, 0xffcc33ff, 0xff9933ff, 0xff6633ff, 0xff3333ff, 0xff0033ff, 0xffff00ff,\n    0xffcc00ff, 0xff9900ff, 0xff6600ff, 0xff3300ff, 0xff0000ff, 0xffffffcc, 0xffccffcc, 0xff99ffcc, 0xff66ffcc, 0xff33ffcc, 0xff00ffcc, 0xffffcccc, 0xffcccccc, 0xff99cccc, 0xff66cccc, 0xff33cccc,\n    0xff00cccc, 0xffff99cc, 0xffcc99cc, 0xff9999cc, 0xff6699cc, 0xff3399cc, 0xff0099cc, 0xffff66cc, 0xffcc66cc, 0xff9966cc, 0xff6666cc, 0xff3366cc, 0xff0066cc, 0xffff33cc, 0xffcc33cc, 0xff9933cc,\n    0xff6633cc, 0xff3333cc, 0xff0033cc, 0xffff00cc, 0xffcc00cc, 0xff9900cc, 0xff6600cc, 0xff3300cc, 0xff0000cc, 0xffffff99, 0xffccff99, 0xff99ff99, 0xff66ff99, 0xff33ff99, 0xff00ff99, 0xffffcc99,\n    0xffcccc99, 0xff99cc99, 0xff66cc99, 0xff33cc99, 0xff00cc99, 0xffff9999, 0xffcc9999, 0xff999999, 0xff669999, 0xff339999, 0xff009999, 0xffff6699, 0xffcc6699, 0xff996699, 0xff666699, 0xff336699,\n    0xff006699, 0xffff3399, 0xffcc3399, 0xff993399, 0xff663399, 0xff333399, 0xff003399, 0xffff0099, 0xffcc0099, 0xff990099, 0xff660099, 0xff330099, 0xff000099, 0xffffff66, 0xffccff66, 0xff99ff66,\n    0xff66ff66, 0xff33ff66, 0xff00ff66, 0xffffcc66, 0xffcccc66, 0xff99cc66, 0xff66cc66, 0xff33cc66, 0xff00cc66, 0xffff9966, 0xffcc9966, 0xff999966, 0xff669966, 0xff339966, 0xff009966, 0xffff6666,\n    0xffcc6666, 0xff996666, 0xff666666, 0xff336666, 0xff006666, 0xffff3366, 0xffcc3366, 0xff993366, 0xff663366, 0xff333366, 0xff003366, 0xffff0066, 0xffcc0066, 0xff990066, 0xff660066, 0xff330066,\n    0xff000066, 0xffffff33, 0xffccff33, 0xff99ff33, 0xff66ff33, 0xff33ff33, 0xff00ff33, 0xffffcc33, 0xffcccc33, 0xff99cc33, 0xff66cc33, 0xff33cc33, 0xff00cc33, 0xffff9933, 0xffcc9933, 0xff999933,\n    0xff669933, 0xff339933, 0xff009933, 0xffff6633, 0xffcc6633, 0xff996633, 0xff666633, 0xff336633, 0xff006633, 0xffff3333, 0xffcc3333, 0xff993333, 0xff663333, 0xff333333, 0xff003333, 0xffff0033,\n    0xffcc0033, 0xff990033, 0xff660033, 0xff330033, 0xff000033, 0xffffff00, 0xffccff00, 0xff99ff00, 0xff66ff00, 0xff33ff00, 0xff00ff00, 0xffffcc00, 0xffcccc00, 0xff99cc00, 0xff66cc00, 0xff33cc00,\n    0xff00cc00, 0xffff9900, 0xffcc9900, 0xff999900, 0xff669900, 0xff339900, 0xff009900, 0xffff6600, 0xffcc6600, 0xff996600, 0xff666600, 0xff336600, 0xff006600, 0xffff3300, 0xffcc3300, 0xff993300,\n    0xff663300, 0xff333300, 0xff003300, 0xffff0000, 0xffcc0000, 0xff990000, 0xff660000, 0xff330000, 0xff0000ee, 0xff0000dd, 0xff0000bb, 0xff0000aa, 0xff000088, 0xff000077, 0xff000055, 0xff000044,\n    0xff000022, 0xff000011, 0xff00ee00, 0xff00dd00, 0xff00bb00, 0xff00aa00, 0xff008800, 0xff007700, 0xff005500, 0xff004400, 0xff002200, 0xff001100, 0xffee0000, 0xffdd0000, 0xffbb0000, 0xffaa0000,\n    0xff880000, 0xff770000, 0xff550000, 0xff440000, 0xff220000, 0xff110000, 0xffeeeeee, 0xffdddddd, 0xffbbbbbb, 0xffaaaaaa, 0xff888888, 0xff777777, 0xff555555, 0xff444444, 0xff222222, 0xff111111\n]).buffer);\n\nclass VoxPalette {\n    constructor(paletteData) {\n        this.data = paletteData;\n        this.tmp = [0, 0, 0, 0];\n    }\n\n    clr(index) {\n        const tmp = this.tmp;\n        tmp[0] = this.data[index * 4 + 0];\n        tmp[1] = this.data[index * 4 + 1];\n        tmp[2] = this.data[index * 4 + 2];\n        tmp[3] = this.data[index * 4 + 3];\n        return tmp;\n    }\n}\n\n// map x->x, y->z, z->y\nconst _x = 0;\nconst _y = 2;\nconst _z = 1;\n\nclass VoxFrame {\n    constructor(voxelData) {\n        this._data = voxelData;\n        this._bound = null;\n        this._flattened = null;\n    }\n\n    get data() {\n        return this._data;\n    }\n\n    get numVoxels() {\n        return this.data.length / 4;\n    }\n\n    get bound() {\n        if (!this._bound) {\n            const data = this.data;\n            const min = [data[_x], data[_y], data[_z]];\n            const max = [data[_x], data[_y], data[_z]];\n\n            const numVoxels = this.numVoxels;\n            for (let i = 1; i < numVoxels; ++i) {\n                const x = data[i * 4 + _x];\n                const y = data[i * 4 + _y];\n                const z = data[i * 4 + _z];\n                if (x < min[0]) min[0] = x; else if (x > max[0]) max[0] = x;\n                if (y < min[1]) min[1] = y; else if (y > max[1]) max[1] = y;\n                if (z < min[2]) min[2] = z; else if (z > max[2]) max[2] = z;\n            }\n            this._bound = {\n                min: min,\n                max: max,\n                extent: [max[0] - min[0] + 1, max[1] - min[1] + 1, max[2] - min[2] + 1]\n            };\n        }\n\n        return this._bound;\n    }\n\n    get flattened() {\n        if (!this._flattened) {\n            const data = this.data;\n            const min = this.bound.min;\n            const max = this.bound.max;\n            const extent = this.bound.extent;\n            const flattenedData = new Uint8Array(extent[0] * extent[1] * extent[2]);\n\n            const numVoxels = this.numVoxels;\n            for (let i = 0; i < numVoxels; ++i) {\n                const index = (data[i * 4 + _x] - min[0]) +\n                            (data[i * 4 + _y] - min[1]) * extent[0] +\n                            (data[i * 4 + _z] - min[2]) * extent[0] * extent[1];\n                flattenedData[index] = data[i * 4 + 3];\n            }\n\n            this._flattened = {\n                extent: extent,\n                data: flattenedData,\n                at: (x, y, z) => {\n                    if (x < 0 || y < 0 || z < 0 || x >= extent[0] || y >= extent[1] || z >= extent[2]) {\n                        return 0;\n                    }\n                    const index = x + y * extent[0] + z * extent[0] * extent[1];\n                    return flattenedData[index];\n                }\n            };\n        }\n        return this._flattened;\n    }\n}\n\nclass VoxModel {\n    constructor() {\n        this.frames = [];\n        this.palette = null;\n    }\n\n    addFrame(frame) {\n        this.frames.push(frame);\n    }\n\n    setPalette(palette) {\n        this.palette = palette;\n    }\n}\n\nclass VoxLoader {\n    static load(arrayBuffer) {\n        const rs = new pc.ReadStream(arrayBuffer);\n\n        const readChunkHeader = () => {\n            return {\n                id: rs.readChars(4),\n                numBytes: rs.readU32(),\n                numChildBytes: rs.readU32()\n            };\n        };\n\n        const fileId = rs.readChars(4);\n        if (fileId !== 'VOX ') {\n            console.log('invalid vox header');\n            return null;\n        }\n\n        const version = rs.readU32();\n        if (version !== 150) {\n            console.log('invalid vox version');\n            return null;\n        }\n\n        const mainChunk = readChunkHeader();\n        if (mainChunk.id !== 'MAIN') {\n            console.log('invalid first chunk in vox');\n            return null;\n        }\n\n        const voxModel = new VoxModel();\n        while (rs.offset < mainChunk.numChildBytes) {\n            const chunk = readChunkHeader();\n\n            switch (chunk.id) {\n                case 'XYZI': {\n                    const numVoxels = rs.readU32();\n                    voxModel.addFrame(new VoxFrame(new Uint8Array(arrayBuffer, rs.offset, numVoxels * 4)));\n                    rs.skip(numVoxels * 4);\n                    break;\n                }\n                case 'RGBA':\n                    voxModel.setPalette(new VoxPalette(new Uint8Array(arrayBuffer, rs.offset, 256 * 4)));\n                    rs.skip(256 * 6);\n                    break;\n                default:\n                    // skip other chunks\n                    rs.skip(chunk.numBytes + chunk.numChildBytes);\n                    break;\n            }\n        }\n\n        if (!voxModel.palette) {\n            voxModel.setPalette(defaultPalette);\n        }\n\n        return voxModel;\n    }\n}\n\n// vox mesh generation\n\nconst vset = (v0, v1) => {\n    v0[0] = v1[0];\n    v0[1] = v1[1];\n    v0[2] = v1[2];\n};\n\nconst vadd = (v0, v1) => {\n    v0[0] += v1[0];\n    v0[1] += v1[1];\n    v0[2] += v1[2];\n};\n\nconst vsub = (v0, v1) => {\n    v0[0] -= v1[0];\n    v0[1] -= v1[1];\n    v0[2] -= v1[2];\n};\n\nclass VoxGen {\n    static mesh(device, voxMesh, frame) {\n        const voxFrame = voxMesh.frames[frame];\n\n        if (!voxFrame) {\n            return null;\n        }\n\n        const flattened = voxFrame.flattened;\n\n        const positions = [];\n        const normals = [];\n        const colors = [];\n        const indices = [];\n\n        const pos = [0, 0, 0];\n        const tmp = [0, 0, 0];\n\n        const quad = (axis1, axis2, normal, paletteIndex) => {\n            // indices\n            const baseIndex = positions.length / 3;\n            indices.push(baseIndex, baseIndex + 1, baseIndex + 2, baseIndex, baseIndex + 2, baseIndex + 3);\n\n            // positions\n            vset(tmp, pos);\n            positions.push(tmp[0], tmp[1], tmp[2]);\n            vadd(tmp, axis1);\n            positions.push(tmp[0], tmp[1], tmp[2]);\n            vadd(tmp, axis2);\n            positions.push(tmp[0], tmp[1], tmp[2]);\n            vsub(tmp, axis1);\n            positions.push(tmp[0], tmp[1], tmp[2]);\n\n            // normals\n            normals.push(normal[0], normal[1], normal[2]);\n            normals.push(normal[0], normal[1], normal[2]);\n            normals.push(normal[0], normal[1], normal[2]);\n            normals.push(normal[0], normal[1], normal[2]);\n\n            // colors\n            const clr = voxMesh.palette.clr(paletteIndex - 1);\n            colors.push(clr[0], clr[1], clr[2], clr[3]);\n            colors.push(clr[0], clr[1], clr[2], clr[3]);\n            colors.push(clr[0], clr[1], clr[2], clr[3]);\n            colors.push(clr[0], clr[1], clr[2], clr[3]);\n        };\n\n        const posX = [1, 0, 0];\n        const posY = [0, 1, 0];\n        const posZ = [0, 0, 1];\n        const negX = [-1, 0, 0];\n        const negY = [0, -1, 0];\n        const negZ = [0, 0, -1];\n\n        // generate voxel mesh from flattened voxel data\n        for (let z = 0; z <= flattened.extent[2]; ++z) {\n            pos[2] = z;\n            for (let y = 0; y <= flattened.extent[1]; ++y) {\n                pos[1] = y;\n                for (let x = 0; x <= flattened.extent[0]; ++x) {\n                    pos[0] = x;\n\n                    const v = flattened.at(x, y, z);\n                    const px = flattened.at(x - 1, y, z);\n                    const py = flattened.at(x, y - 1, z);\n                    const pz = flattened.at(x, y, z - 1);\n\n                    if (v !== 0) {\n                        if (px === 0) {\n                            quad(posZ, posY, negX, v);\n                        }\n                        if (py === 0) {\n                            quad(posX, posZ, negY, v);\n                        }\n                        if (pz === 0) {\n                            quad(posY, posX, negZ, v);\n                        }\n                    } else {\n                        if (px !== 0) {\n                            quad(posY, posZ, posX, px);\n                        }\n                        if (py !== 0) {\n                            quad(posZ, posX, posY, py);\n                        }\n                        if (pz !== 0) {\n                            quad(posX, posY, posZ, pz);\n                        }\n                    }\n                }\n            }\n        }\n\n        // construct the mesh\n        const mesh = new pc.Mesh(device);\n        mesh.setPositions(positions);\n        mesh.setNormals(normals);\n        mesh.setColors32(colors);\n        mesh.setIndices(indices);\n        mesh.update();\n\n        return mesh;\n    }\n}\n\n// container resource\n\nclass VoxContainerResource {\n    constructor(device, voxModel) {\n        this.device = device;\n        this.voxModel = voxModel;\n    }\n\n    instantiateModelEntity(options) {\n        return null;\n    }\n\n    instantiateRenderEntity(options) {\n        const material = new pc.StandardMaterial();\n        material.diffuseVertexColor = true;\n\n        // generate animation frames\n        const meshInstances = this.voxModel.frames.map((f, i) => {\n            const mesh = VoxGen.mesh(this.device, this.voxModel, i);\n            return new pc.MeshInstance(mesh, material);\n        });\n\n        const entity = new pc.Entity();\n        entity.addComponent('render', {\n            material: material,\n            meshInstances: meshInstances\n        });\n\n        entity.addComponent('voxanim', { });\n\n        this.renders = [];\n\n        return entity;\n    }\n}\n\n// component / system support\n\nconst VoxAnimComponentSchema =  ['enabled'];\n\nclass VoxAnimComponentData {\n    constructor() {\n        this.enabled = true;\n    }\n}\n\nclass VoxAnimComponent extends Component {\n    constructor(system, entity) {\n        super(system, entity);\n\n        this.playing = true;\n        this.timer = 0;\n        this.fps = 10;\n    }\n\n    update(dt) {\n        if (this.playing) {\n            this.timer += dt;\n        }\n\n        const meshInstances = this.entity.render?.meshInstances || this.entity.model?.meshInstances;\n        if (meshInstances) {\n            const frame = Math.floor(this.timer * this.fps) % meshInstances.length;\n            for (let i = 0; i < meshInstances.length; ++i) {\n                meshInstances[i].visible = (i === frame);\n            }\n        }\n    }\n}\n\nclass VoxAnimSystem extends ComponentSystem {\n    constructor(app) {\n        super(app);\n\n        this.id = 'voxanim';\n        this.ComponentType = VoxAnimComponent;\n        this.DataType = VoxAnimComponentData;\n\n        this.schema = VoxAnimComponentSchema;\n\n        this.app.systems.on('update', this.onUpdate, this);\n    }\n\n    initializeComponentData(component, data, properties) {\n        properties = [\n            'playing',\n            'timer',\n            'fps'\n        ];\n\n        for (let i = 0; i < properties.length; i++) {\n            if (data.hasOwnProperty(properties[i])) {\n                component[properties[i]] = data[properties[i]];\n            }\n        }\n\n        super.initializeComponentData(component, data, VoxAnimComponentSchema);\n    }\n\n    cloneComponent(entity, clone) {\n        const srcComponent = entity.voxanim;\n        const cloneData = {\n            playing: srcComponent.playing,\n            timer: srcComponent.timer,\n            fps: srcComponent.fps\n        };\n\n        return this.addComponent(clone, cloneData);\n    }\n\n    onUpdate(dt) {\n        const components = this.store;\n        for (const id in components) {\n            if (components.hasOwnProperty(id)) {\n                const entity = components[id].entity;\n                if (entity.enabled) {\n                    const component = entity.voxanim;\n                    if (component.enabled) {\n                        component.update(dt);\n                    }\n                }\n            }\n        }\n    }\n\n    destroy() {\n        super.destroy();\n        this.app.systems.off('update', this.onUpdate, this);\n    }\n}\n\nComponent._buildAccessors(VoxAnimComponent.prototype, VoxAnimComponentSchema);\n\n// parser\n\nclass VoxParser {\n    constructor(device, assets, maxRetries) {\n        this._device = device;\n        this._assets = assets;\n        this._maxRetries = maxRetries;\n    }\n\n    load(url, callback, asset) {\n        pc.Asset.fetchArrayBuffer(url.load, (err, result) => {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, new VoxContainerResource(this._device, VoxLoader.load(result)));\n            }\n        }, asset, this._maxRetries);\n    }\n\n    open(url, data, asset) {\n        return data;\n    }\n}\n\nconst registerVoxParser = (app) => {\n    // register the animation component system\n    app.systems.add(new VoxAnimSystem(app));\n\n    // register resource handler\n    app.loader.getHandler(\"container\").parsers.vox = new VoxParser(app.graphicsDevice, app.assets);\n};\n\nexport {\n    registerVoxParser\n};\n"],"names":["EventHandler","initEventHandler","_callbacks","_callbackActive","_addCallback","name","callback","scope","once","slice","push","on","off","key","events","count","length","i","fire","arg1","arg2","arg3","arg4","arg5","arg6","arg7","arg8","callbacks","evt","call","existingCallback","ind","indexOf","splice","hasEvent","Component","system","entity","schema","_accessorsBuilt","buildAccessors","oldValue","newValue","onSetEnabled","_buildAccessors","obj","forEach","descriptor","Object","defineProperty","get","data","set","value","configurable","enabled","onEnable","onDisable","onPostStateChange","record","store","getGuid","attach","target","ev","prototype","math","DEG_TO_RAD","Math","PI","RAD_TO_DEG","clamp","min","max","intToBytes24","r","g","b","intToBytes32","a","bytesToInt24","bytesToInt32","lerp","alpha","lerpAngle","powerOfTwo","x","nextPowerOfTwo","val","random","diff","smoothstep","smootherstep","roundUp","numToRound","multiple","ceil","between","num","inclusive","Color","undefined","clone","copy","rhs","equals","lhs","fromString","hex","parseInt","replace","bytes","toString","s","round","BLACK","freeze","BLUE","CYAN","GRAY","GREEN","MAGENTA","RED","WHITE","YELLOW","Vec2","y","add","add2","addScalar","scalar","cross","distance","sqrt","div","div2","divScalar","dot","lengthSq","mul","mul2","mulScalar","normalize","invLength","floor","sub","sub2","subScalar","angleRad","atan2","ZERO","ONE","UP","DOWN","RIGHT","LEFT","Vec3","z","lx","ly","lz","rx","ry","rz","project","a_dot_b","b_dot_b","FORWARD","BACK","Vec4","w","ComponentSystem","app","addComponent","component","ComponentType","componentData","DataType","id","c","initializeComponentData","removeComponent","cloneComponent","src","properties","len","type","convertValue","getPropertiesOfType","matchingProperties","destroy","Error","defaultPalette","Uint8Array","Uint32Array","buffer","VoxPalette","paletteData","tmp","clr","index","_x","_y","_z","VoxFrame","voxelData","_data","_bound","_flattened","numVoxels","extent","bound","flattenedData","at","VoxModel","frames","palette","addFrame","frame","setPalette","VoxLoader","load","arrayBuffer","rs","pc","ReadStream","readChunkHeader","readChars","numBytes","readU32","numChildBytes","fileId","console","log","version","mainChunk","voxModel","offset","chunk","skip","vset","v0","v1","vadd","vsub","VoxGen","mesh","device","voxMesh","voxFrame","flattened","positions","normals","colors","indices","pos","quad","axis1","axis2","normal","paletteIndex","baseIndex","posX","posY","posZ","negX","negY","negZ","v","px","py","pz","Mesh","setPositions","setNormals","setColors32","setIndices","update","VoxContainerResource","instantiateModelEntity","options","instantiateRenderEntity","material","StandardMaterial","diffuseVertexColor","meshInstances","map","f","MeshInstance","Entity","renders","VoxAnimComponentSchema","VoxAnimComponentData","VoxAnimComponent","playing","timer","fps","dt","render","model","visible","VoxAnimSystem","systems","onUpdate","hasOwnProperty","srcComponent","voxanim","cloneData","components","VoxParser","assets","maxRetries","_device","_assets","_maxRetries","url","asset","Asset","fetchArrayBuffer","err","result","open","registerVoxParser","loader","getHandler","parsers","vox","graphicsDevice"],"mappings":"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"}